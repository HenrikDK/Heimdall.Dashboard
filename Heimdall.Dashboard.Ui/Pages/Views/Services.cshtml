<template id="services">
    <div class="pl-2 pr-4 w-100">
        <div class="flex my-2 items-center">
            <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Services</span>
        </div>
        
        <template v-if="services && services.length > 0">
            <vuetable :columns="columns" :initial-sort="sorting" :data="services" :namespaces="namespaces" :search="search"></vuetable>
        </template>
    </div>
</template>

<script type="module">

   function formatKubeDns(row){
        let dns = row.metadata.name + '.' + row.metadata.namespace + ':' + row.spec.ports[0].port
        return {content: dns, classes:''};
    }

   function formatServiceAge(row){
        var DT = window.DateTime || luxon.DateTime;
        var invalid = "";
        const unit = ["years", "days", "hours", "minutes", "seconds", "milliseconds"]
        var date = DT.now();
    
        var newDatetime = DT.fromISO(String(row.metadata.creationTimestamp));
        return {content:'' + toHuman(newDatetime.diff(date, unit)), classes: ''};
    }
    
    components["services"] = {
        template: "#services",
        data() {
            return {
                services: [
                    {   
                        metadata:{name: "user-api", namespace:"petstore", creationTimestamp:'2023-02-11T14:48:00.000Z'},
                        spec:{type: "ClusterIP", ports: [{port:"8080"}]}
                    },
                    {
                        metadata:{name: "store-api", namespace:"petstore", creationTimestamp:'2023-02-13T15:48:00.000Z'},
                        spec:{type: "NodeIP", ports: [{port:"8080"}]}
                    },
                    {
                        metadata:{name: "order-api", namespace:"petstore", creationTimestamp:'2023-02-17T12:18:00.000Z'},
                        spec:{type: "LoadBalancer", ports: [{port:"8080"}]}
                    },
                    {
                        metadata:{name: "management-ui", namespace:"petstore", creationTimestamp:'2023-02-17T12:18:00.000Z'},
                        spec:{type: "ClusterIP", ports: [{port:"8080"}]}
                    },
                    {
                        metadata:{name: "pet-api", namespace:"petstore", creationTimestamp:'2023-02-17T10:18:00.000Z'},
                        spec:{type: "NodeIP", ports: [{port:"8080"}]}
                    },
                ],
                columns: [
                    {header:"Type", name:"spec.type", classes:"w-40", canSort: false},
                    {header:"Name", name:"metadata.name", classes:"w-64"},
                    {header:"Namespace", name:"metadata.namespace", classes:"w-64"},
                    {header:"Kube-DNS", name:"kubeDNS", formatter:formatKubeDns, classes: 'grow shrink'},
                    {header:"Age", name:"age", formatter:formatServiceAge, sorter:"text", classes:"w-40"},                    
                ],
                sorting: [],
                clusterServices: null,
            }
        },
        methods: {
          async updateServices() {
            if (!this.clusterServices) return;
            
            let result = [...this.clusterServices];
            if (this.filters?.length){
                result = this.result.filter(x => filterName(x, this.filters))
            }
                        
            this.services = result;
          }
        },
        watch: {
          clusterServices: function (){this.updateServices()},
        },
        props: ['namespaces', 'search', 'filters'],
        mounted() {
          var host = window.location.origin;
          streamResults(host + '/k8s/api/v1/services', j => this.clusterServices = j)
        },
    };
    
    routes.push({path:'/services', name:'services', component: components["services"]})    
</script>

<style>
</style>