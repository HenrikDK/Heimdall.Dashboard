<template id="services">
  <div class="pl-2 pr-4 w-100">
    <div class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Services</span>
    </div>
  
  <vue-table :columns="columns" :initial-sort="sorting" :data="services" :namespaces="namespaces" :loading="loading" :search="search"></vue-table>
  
  </div>
</template>

<script type="module">
import { ref, watch, onMounted } from 'vue'

let setup = (props, ctx) => {
  const loading = ref(true);
  const sorting = ref([{header:'Name', sort:'desc'}]);
  const clusterServices = ref([]);
  const services = ref([
    {   
      metadata:{name: "user-api", namespace:"petstore", creationTimestamp:'2023-02-11T14:48:00.000Z'},
      spec:{type: "ClusterIP", ports: [{port:"8080"}]}
    },
    {
      metadata:{name: "store-api", namespace:"petstore", creationTimestamp:'2023-02-13T15:48:00.000Z'},
      spec:{type: "NodeIP", ports: [{port:"8080"}]}
    },
    {
      metadata:{name: "order-api", namespace:"petstore", creationTimestamp:'2023-02-17T12:18:00.000Z'},
      spec:{type: "LoadBalancer", ports: [{port:"8080"}]}
    },
    {
      metadata:{name: "management-ui", namespace:"petstore", creationTimestamp:'2023-02-17T12:18:00.000Z'},
      spec:{type: "ClusterIP", ports: [{port:"8080"}]}
    },
    {
      metadata:{name: "pet-api", namespace:"petstore", creationTimestamp:'2023-02-17T10:18:00.000Z'},
      spec:{type: "NodeIP", ports: [{port:"8080"}]}
    }
  ]);
    
  let getKubeDns = (row) => {
    let lines = row.spec?.ports.map(x => row.metadata.name + '.' + row.metadata.namespace + ':' + x.port)
    return lines.join("\r\n");
  }
    
  const columns = ref([
    { header:'Type', id: 'type', canSort: false, classes: 'truncate 2xl:w-48 xl:w-40 lg:w-32', 
      accessor: row => row.spec.type },
    { header:'Name', id: 'name', sorter: 'text', classes: 'truncate 2xl:w-64 xl:w-52 lg:w-40', 
      accessor: row => row.metadata.name },
    { header:'Namespace', id: 'namespace', sorter: 'text', classes: 'truncate 2xl:w-52 xl:w-44 lg:w-40', 
      accessor: row => row.metadata.namespace, formatter:'namespace' },
    { header:'Kube-DNS', id:'dns', sorter: 'text', classes: 'truncate grow shrink',
      accessor: getKubeDns, formatter:'kube-dns' },
    { header:'Age', id:'age', sorter: 'text', classes:'w-40', 
      accessor: row => row.age, formatter:'object-age' }
  ]);

  let updateServices = async () => {
    if (!clusterServices.value) return;
      
    let result = [...clusterServices.value];
    if (props.filters?.length){
      result = this.result.filter(x => filterName(x, props.filters))
    }
      
    services.value = result;
    loading.value = false;
  }
  
  watch([() => props.filters, clusterServices], updateServices);
  
  onMounted(() => {
    var host = window.location.origin;
    streamResults(host + '/k8s/api/v1/services', j => clusterServices.value = j)
  });
  
  return { loading, sorting, columns, clusterServices, services, getKubeDns, updateServices }
}

components["services"] = { template: "#services", props: ['namespaces', 'search', 'filters'], setup };
routes.push({path:'/services', name:'services', component: components["services"]})    
</script>
