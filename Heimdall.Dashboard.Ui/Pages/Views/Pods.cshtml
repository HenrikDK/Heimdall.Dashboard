<template id="pods">
  <div class="pl-2 pr-4 w-100">
    <div class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Pods</span>
    </div>
    
    <vue-table :columns="columns" :initial-sort="sorting" :data="pods" :namespaces="namespaces" :loading="loading" :search="search"></vue-table>
    
  </div>
</template>

<script type="module">
import { ref, watch, onMounted } from 'vue'

let setup = (props, ctx) => {
  const loading = ref(true);                
  const sorting = ref([{header:'Name', sort:'asc'}]);
  const clusterPods = ref([]);
  const pods = ref([
    {
      metadata: { name: "flux-something", namespace: "monitoring", creationTimestamp: "2023-01-05T14:48:00.000Z" },
      status: { phase: 'Running', 
      containerStatuses: [{ restartCount: 2, state: {running: {}}}], 
      initContainerStatuses: [{ restartCount: 0, state: {terminated: {}}}] }
    },
    {
      metadata: { name: "flux-something", namespace: "flux-system", creationTimestamp: "2023-02-05T14:48:00.000Z" },
      status: { phase: 'Running', 
      containerStatuses: [{ restartCount: 0, state: {running: {}}}] }
    },
    {
      metadata: { name: "kube-controller", namespace: "default", creationTimestamp: "2023-02-12T14:48:00.000Z"}, 
      status: { phase: 'Running', 
      containerStatuses: [{ restartCount: 3, state: {running: {}}}] }
    },
    {
      metadata: { name: "cert-manager", namespace: "ingress", creationTimestamp: "2023-02-11T14:48:00.000Z"},
      status: { phase: 'Running', 
      containerStatuses: [{ restartCount: 0, state: {terminated: {}}}] }
     },
     { 
       metadata: { name: "pod-manager", namespace: "kube-system", creationTimestamp: "2023-02-10T14:48:00.000Z"},
       status: { phase: 'Running', 
       containerStatuses: [{ restartCount: 3, state: {running: {}}}, { restartCount: 0, state: {terminated: {}}}] }
     }
  ]);
    
  let getRestarts = (row) => {
    let con = 0;
    con += row.status.containerStatuses?.reduce((a, v) => a + v.restartCount, 0);
    con += row.status.initContainerStatuses?.reduce((a, v) => a + v.restartCount, 0) ?? 0;
    return con
  }
 
  let formatRestarts = (row) => {
    let con = getRestarts(row);
    return { content:con, classes: '' };
  }

  let formatSource = (row) => {
    let con = row.involvedObject.kind + ": " + row.involvedObject.name;
    return { content:con, classes: 'text-blue-500 w-80' };
  }
    
  let formatStatus = (row) => {
    let con = row.status.phase;
    return { content:con, classes: 'text-green-500 w-65' };
  }

  let formatPodAge = (row) => {
    var DT = window.DateTime || luxon.DateTime;
    var invalid = "";
    const unit = ["years", "days", "hours", "minutes", "seconds", "milliseconds"]
    var date = DT.now();

    var newDatetime = DT.fromISO(String(row.metadata.creationTimestamp));
    return {content:''+ toHuman(newDatetime.diff(date, unit)), classes: ''};
  };
  
  const columns = ref([
    { header: 'Name', id: 'name', classes: 'truncate grow shrink 2xl:w-[41rem] xl:w-[22rem] lg:w-[16rem]', 
      accessor: row => row.metadata.name },
    { header: 'Namespace', id: 'namespace', classes: 'truncate 2xl:w-52 xl:w-44 lg:w-32', 
      accessor: row => row.metadata.namespace, formatter: 'namespace' },
    { header: 'Containers', id: 'containers', canSort: false, podLights: true, canFilter: false, classes: '2xl:w-52 xl:w-44 lg:w-32', 
      accessor: row => row.status.containerStatuses },
    { header: 'Restarts', id: 'restarts', classes: 'w-40', sorter: 'number',
      accessor: getRestarts, formatter:formatRestarts },
    { header: 'Age', id: 'age', update:true, classes: 'w-40', 
      accessor: row => row.metadata.creationTimestamp, formatter:formatPodAge },
    { header: 'Status', id: 'status', canSort: false, classes: 'truncate 2xl:w-64 xl:w-52 lg:w-40',  
      accessor: row => row.status.phase, formatter:formatStatus }
  ]);
  
  let updatePods = () => {
    if (!clusterPods.value) return;
    
    let result = [...clusterPods.value];
                    
    if (props.filters?.length){
        result = result.filter(x => filterName(x, props.filters))
    }
    
    pods.value = result;
    loading.value = false;
  }
  
  watch([() => props.filters, clusterPods ], updatePods);
  
  onMounted(async () => {
    var host = window.location.origin;
    streamResults(host + '/k8s/api/v1/pods', j => clusterPods.value = j);
  });
  
  return {
    loading, sorting, clusterPods, pods, columns, getRestarts,
    formatSource, formatStatus, formatPodAge, formatRestarts,
    updatePods
  }
}

components["pods"] = { template: "#pods", props: ['namespaces', 'search', 'filters'], setup};
routes.push({path:'/pods', name:'pods', component: components["pods"]});
</script>
