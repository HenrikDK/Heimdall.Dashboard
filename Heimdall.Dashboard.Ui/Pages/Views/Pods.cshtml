<template id="pods">
    <div class="pl-2 pr-4 w-100">
        <div class="flex my-2 items-center">
            <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Pods</span>
        </div>
        
        <div class="flex justify-around mb-4 mt-1">
            <div class="graph">
                <v-chart :option="podsAvailable"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="podCpuUsage"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="podMemoryUsage"></v-chart>
            </div>
        </div>
        
        <div id="pods-table" ref="pods" v-show="podData.length > 0" class="vh-80 w-full"></div>
    </div>
</template>

<script type="module">
    import { TabulatorFull as Tabulator } from 'tabulator'

    components["pods"] = {
        template: "#pods",
        data() {
            return {
                pods: {},
                podData: [
                    {name: "flux-something", namespace: "petstore", restarts: "2", containers: "1,1", age: "22d4h", status:"Running"},
                    {name: "flux-something", namespace: "petstore", restarts: "0", containers: "1", age: "10d5h", status:"Running"},
                    {name: "kube-controller", namespace: "petstore", restarts: "3", containers: "1", age: "13d5h", status:"Running"},
                    {name: "cert-manager", namespace: "petstore", restarts: "0", containers: "0", age: "14min", status:"Running"},
                    {name: "pod-manager", namespace: "petstore", restarts: "0", containers: "1,2", age: "1h20m", status:"Running"},
                ],
            }
        },
        props: ['namespace', 'search'],        
        computed: {
            podsAvailable: () => podReady(),
            podCpuUsage: () => podCpu(),
            podMemoryUsage: () => podMemory(),
        },
        async mounted() {
            this.events = new Tabulator(this.$refs.pods, {
              maxHeight:"80vh",
              layout:"fitData",
              movableColumns: true,
              persistence:true,
              persistenceMode:true,
              data: this.podData,
              reactiveData:true,
              columns: [
                {title:"Name", field:"name", sorter:"string", minWidth:280},
                {title:"Namespace", field:"namespace", sorter:"string", minWidth:200},
                {title:"Containers", field:"containers", sorter:"string", minWidth:250},
                {title:"Restarts", field:"restarts", sorter:"string", minWidth:150},
                {title:"Age", field:"age", sorter:"string", minWidth:100},
                {title:"Status", field:"status", sorter:"string", minWidth:250},
              ],
            });
            
            var host = window.location.origin;
            streamResults(host + '/k8s/api/v1/pods', j => this.clusterPods = j);
        },
    };
    
    routes.push({path:'/pods', name:'pods', component: components["pods"]})    
</script>

<style>
</style>