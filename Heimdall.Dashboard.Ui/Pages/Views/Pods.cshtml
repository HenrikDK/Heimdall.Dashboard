<template id="pods">
    <div class="pl-2 pr-4 w-100">
        <div class="flex my-2 items-center">
            <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Pods</span>
        </div>
        
        <div class="flex justify-around mb-4 mt-1">
            <div class="graph">
                <v-chart :option="podsAvailable" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="podCpuUsage" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="podMemoryUsage" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
        </div>

        <template v-if="pods && pods.length > 0">
            <vuetable :columns="columns" :initial-sort="sorting" :data="pods" :namespaces="namespaces" :search="search"></vuetable>
        </template>
    </div>
</template>

<script type="module">
    import {useDark} from "vueuse";
    const isDark = useDark()
    
   function formatPodAge(row){
        var DT = window.DateTime || luxon.DateTime;
        var invalid = "";
        const unit = ["years", "days", "hours", "minutes", "seconds", "milliseconds"]
        var date = DT.now();
    
        var newDatetime = DT.fromISO(String(row.lastTimestamp));
        return toHuman(newDatetime.diff(date, unit));
    }
    
    components["pods"] = {
        template: "#pods",
        data() {
            return {
                pods: [
                    {name: "flux-something", namespace: "monitoring", restarts: 2, containers: [1,1], lastTimestamp: "2023-01-05T14:48:00.000Z", status:"Running"},
                    {name: "flux-something", namespace: "flux-system", restarts: 0, containers: [1], lastTimestamp: "2023-02-05T14:48:00.000Z", status:"Running"},
                    {name: "kube-controller", namespace: "default", restarts: 3, containers: [1], lastTimestamp: "2023-02-12T14:48:00.000Z",status:"Running"},
                    {name: "cert-manager", namespace: "ingress", restarts: 0, containers: [0], lastTimestamp: "2023-02-11T14:48:00.000Z", status:"Running"},
                    {name: "pod-manager", namespace: "kube-system", restarts: 0, containers: [1,2], lastTimestamp: "2023-02-10T14:48:00.000Z", status:"Running"},
                ],
                columns:[
                {header:"Name", name:"name"},
                {header:"Namespace", name:"namespace", classes:"w-64"},
                {header:"Containers", name:"containers", classes:"w-20", canSort:false},
                {header:"Restarts", name:"restarts", classes:"w-20"},
                {header:"Age", name:"lastTimestamp", formatter:formatPodAge, classes:"w-32"},
                {header:"Status", name:"status", classes:"w-32"},
                ],
                sorting:[],
                initOptions: { renderer: "svg" },
                clusterPods: {},
                isDark: isDark
            }
        },
        props: ['namespaces', 'search', 'filters'],        
        computed: {
            podsAvailable: () => podReady(),
            podCpuUsage: () => podCpu(),
            podMemoryUsage: () => podMemory(),
        },
        async mounted() {
            var host = window.location.origin;
            streamResults(host + '/k8s/api/v1/pods', j => this.clusterPods = j);
        },
    };
    
    routes.push({path:'/pods', name:'pods', component: components["pods"]})    
</script>

<style>
</style>