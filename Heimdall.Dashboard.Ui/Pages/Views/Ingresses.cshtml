<template id="ingresses">
  <div class="pl-2 pr-4 w-100">
    <div class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Ingresses</span>
    </div>

    <div class="border border-gray-200 shadow-md rounded-lg overflow-hidden dark:border-zinc-700 mt-4">
      <table v-if="table != null" class="vh-80 min-w-full divide-y divide-gray-200 text-left dark:divide-zinc-700">
        <thead class="bg-gray-100 dark:bg-zinc-800">
        <tr v-for="headerGroup in table.getHeaderGroups()" :key="headerGroup.id">
          <th v-for="header in headerGroup.headers" :key="header.id" :style="{ 'width': header.getSize() + '' }"
              class="text-left text-xs font-strong text-black dark:text-gray-200 uppercase hover:bg-gray-200 dark:hover:bg-zinc-700">

            <div class="flex">
              <div @@dragStart="onDragStart($event)" @@dragOver="onDragOver" @@drop="onDrop"
                   :draggable="!table.getState().columnSizingInfo.isResizingColumn" :data-column-index="header.index"
                   class="px-4 py-2 grow">
                <template v-if="!header.isPlaceholder">
                  <FlexRender :render="header.column.columnDef.header" :props="header.getContext()"/>
                </template>
              </div>

              <div v-if="header.column.getCanSort()"
                   class="px-4 py-2 float-right cursor-pointer select-none"
                   @@click="header.column.getToggleSortingHandler()?.($event)">
                <template v-if="!header.column.getIsSorted()">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9"/>
                  </svg>
                </template>
                <template v-if="header.column.getIsSorted() === 'asc'">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"/>
                  </svg>
                </template>
                <template v-if="header.column.getIsSorted() === 'desc'">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"/>
                  </svg>
                </template>
              </div>

              <div @@onMouseDown="header.getResizeHandler()" @@onTouchStart="header.getResizeHandler()"
                   class="top-0 right-0 h-8 w-0.5 justify-self-end bg-gray-200 hover:bg-gray-800 dark:bg-zinc-700 dark:hover:bg-zinc-200 cursor-resize"
                   :class="header.column.getIsResizing() ? 'bg-blue-200' : ''"/>
            </div>
          </th>
        </tr>
        </thead>
        <tbody class="divide-y divide-gray-200 dark:divide-zinc-700">
        <tr v-for="row in table.getRowModel().rows" :key="row.id"
            class="hover:bg-blue-100 dark:bg-zinc-900 dark:hover:bg-zinc-700">
          <td v-for="cell in row.getVisibleCells()" :key="cell.id"
              class="px-4 py-2 whitespace-nowrap text-sm text-gray-700 dark:text-gray-400">
            <FlexRender :render="cell.column.columnDef.cell" :props="cell.getContext()"/>
          </td>
        </tr>
        </tbody>
      </table>
    </div>
    
    <vuetable :columns="columns2" :sorting="sorting" :data="data"></vuetable>
    
  </div>
</template>

<script type="module">
    import { getCoreRowModel, getSortedRowModel, useVueTable, createColumnHelper} from 'vue-table'
    import { ref, getCurrentInstance } from 'vue'
    const columnHelper = createColumnHelper();
    
    components["ingresses"] = {
        template: "#ingresses",
        data() {
            return {
                table: null,
                columnOrder:[],
                sorting: [],
                columnBeingDragged: 0,
                columns2:[
                    {
                      name: 'name',
                      header: 'Name',
                      canSort: true
                    },
                    {
                      name: 'namespace',
                      header: 'Namespace',
                      canSort: true
                    },
                    {
                      name: 'class',
                      header: 'Type',
                      canSort: false,
                    },
                    {
                      name: 'address',
                      header: 'LoadBalancers',
                      canSort: true
                    },
                    {
                      name: 'hosts',
                      header: 'Host',
                      canSort: true
                    },
                    {
                      name: 'age',
                      header: 'Age',
                      canSort: false
                    }
                ],
                columns:[
                  columnHelper.accessor('name', {
                    header: 'Name',
                  }),
                  columnHelper.accessor('namespace', {
                    header: 'Namespace',
                  }),
                  columnHelper.accessor('class', {
                    header: 'Type',
                    enableSorting: false
                  }),
                  columnHelper.accessor('address', {
                    header: 'LoadBalancers',
                  }),
                  columnHelper.accessor('hosts', {
                    header: 'Host',
                  }),
                  columnHelper.accessor('age', {
                    header: 'Age',
                    enableSorting: false
                  }),
                ],
                data: [
                    {name: "user-api", namespace:"petstore", class:"nginx", hosts:"https://user-api.petstore.dk", address:"192.1.0.1", age: "22d"},
                    {name: "store-api", namespace:"petstore", class:"nginx", hosts:"https://store-api.petstore.dk", address:"192.2.0.1", age: "10d"},
                    {name: "order-api", namespace:"petstore", class:"nginx", hosts:"https://order-api.petstore.dk", address:"192.3.0.1", age: "13d"},
                ],
            }
        },
        methods:{
            onDragOver(e){
              e.preventDefault(); 
            },
            onDragStart(e){
              console.log('drag start ' + e);
              this.$data.columnBeingDragged = Number(e.currentTarget.dataset.columnIndex);
            },
            onDrop(e){
              console.log('drop ' + e);
              e.preventDefault();
              
              const newPosition = Number(e.currentTarget.dataset.columnIndex);
              const currentCols = this.$data.table.getVisibleLeafColumns().map((c) => c.id);
              const colToBeMoved = currentCols.splice(this.$data.columnBeingDragged, 1);
              currentCols.splice(newPosition, 0, colToBeMoved[0]);
              this.$data.columnOrder = currentCols;
            },
        },
        props: ['namespaces', 'search'],        
        mounted() {
            this.$data.table = useVueTable({
            data: this.$data.data,
            columns: this.$data.columns,
            state: {
              get sorting(){
                const instance = getCurrentInstance();
                return instance.data.sorting
              },
              get columnOrder(){
                const instance = getCurrentInstance();
                return instance.data.columnOrder
              },
            },
            onSortingChange: updaterOrValue => {
              this.$data.sorting =
                typeof updaterOrValue === 'function'
                  ? updaterOrValue(this.$data.sorting)
                  : updaterOrValue
            },
            getCoreRowModel: getCoreRowModel(),
            getSortedRowModel: getSortedRowModel(),
            debugTable: true,
            debugHeaders: true,
            debugColumns: true,
          });
        },
    };

    routes.push({path:'/ingresses', name:'ingresses', component: components["ingresses"]})    
</script>

<style>
</style>