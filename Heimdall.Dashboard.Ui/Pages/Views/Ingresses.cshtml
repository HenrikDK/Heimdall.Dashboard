<template id="ingresses">
  <div class="pl-2 pr-4 w-100">
    <div class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Ingresses</span>
    </div>

    <div class="border border-gray-200 shadow-md rounded-lg overflow-hidden dark:border-zinc-700">
      <table v-if="table != null" class="vh-80 w-full min-w-full divide-y divide-gray-200 text-left border-collapse border dark:divide-zinc-700">
        <thead class="bg-gray-50 dark:bg-zinc-800">
        <tr v-for="headerGroup in table.getHeaderGroups()" :key="headerGroup.id">
          <th v-for="header in headerGroup.headers" :key="header.id" :colSpan="header.colSpan" :style="{ 'width': header.getSize() + '' }"
              :draggable="!table.getState().columnSizingInfo.isResizingColumn" :data-column-index="header.index"
              @@onDragStart="onDragStart" @@onDragOver="onDragOver" @@onDrop="onDrop"
              @@click="header.column.getToggleSortingHandler()?.($event)"
              class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase hover:bg-gray-200 dark:hover:bg-zinc-700" 
              :class="header.column.getCanSort() ? 'cursor-pointer select-none' : ''">
              
            <template v-if="!header.isPlaceholder">
              <FlexRender :render="header.column.columnDef.header" :props="header.getContext()"/>
              {{
              { asc: '🔼', desc: '🔽' }
              [
              header.column.getIsSorted()
              ]
              }}
            </template>
            
            <div @@onMouseDown="header.getResizeHandler()" @@onTouchStart="header.getResizeHandler()"
                 class="resizer" :class="header.column.getIsResizing() ? 'isResizing' : ''" />
          </th>
        </tr>
        </thead>
        <tbody class="divide-y divide-gray-200 dark:divide-zinc-700">
        <tr v-for="row in table.getRowModel().rows" :key="row.id"
            class="hover:bg-blue-100 dark:bg-zinc-900 dark:hover:bg-zinc-700">
          <td v-for="cell in row.getVisibleCells()" :key="cell.id"
              class="px-6 py-4 whitespace-nowrap text-sm text-gray-800 dark:text-gray-200">
            <FlexRender :render="cell.column.columnDef.cell" :props="cell.getContext()"/>
          </td>
        </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>

<script type="module">
    import { getCoreRowModel, getSortedRowModel, useVueTable, createColumnHelper} from 'vue-table'
    let columnBeingDragged = -1;
    const columnHelper = createColumnHelper()
    
    components["ingresses"] = {
        template: "#ingresses",
        data() {
            return {
                table: null,
                sorting: [],
                columnOrder:[],                
                columns:[
                  columnHelper.accessor('name', {
                    header: 'Name',
                    footer: props => props.column.id,
                  }),                        
                  columnHelper.accessor('namespace', {
                    header: 'Namespace',
                    footer: props => props.column.id,
                  }),
                  columnHelper.accessor('class', {
                    header: 'Type',
                    footer: props => props.column.id,
                  }),
                  columnHelper.accessor('address', {
                    header: 'LoadBalancers',
                    footer: props => props.column.id,
                  }),
                  columnHelper.accessor('hosts', {
                    header: 'Host',
                    footer: props => props.column.id,
                  }),
                  columnHelper.accessor('age', {
                    header: 'Age',
                    footer: props => props.column.id,
                  }),
                ],
                data: [
                    {name: "user-api", namespace:"petstore", class:"nginx", hosts:"https://user-api.petstore.dk", address:"192.168.0.1", age: "22d"},
                    {name: "store-api", namespace:"petstore", class:"nginx", hosts:"https://store-api.petstore.dk", address:"192.168.0.1", age: "10d"},
                    {name: "order-api", namespace:"petstore", class:"nginx", hosts:"https://order-api.petstore.dk", address:"192.168.0.1", age: "13d"},
                ],
            }
        },
        methods:{
            onDragOver(e){ 
              e.preventDefault(); 
            }, 
            onColumnOrderChange(order){
              this.$data.columnOrder = order
            },
            onSortingChange(updaterOrValue){
              this.$data.sorting = typeof updaterOrValue === 'function' ? updaterOrValue(this.$data.sorting) : updaterOrValue
            },
            onDragStart(e){
              columnBeingDragged = e.currentTarget.dataset.columnIndex;
            },
            onDrop(e){
              e.preventDefault();
              const newPosition = Number(e.currentTarget.dataset.columnIndex);
              const currentCols = instance.getVisibleLeafColumns().map((c) => c.id);
              const colToBeMoved = currentCols.splice(columnBeingDragged, 1);
              
              currentCols.splice(newPosition, 0, colToBeMoved[0]);
              instance.setColumnOrder(currentCols);
            },          
        },
        props: ['namespaces', 'search'],        
        mounted() {
            this.table = useVueTable({
            data: this.data,
            columns: this.columns,
            state: {
              sorting: this.sorting,
              columnVisibility: this.columnVisibility,
              columnOrder: this.columnOrder,
            },
            getCoreRowModel: getCoreRowModel(),
            getSortedRowModel: getSortedRowModel(),
            debugTable: true,
          });
        },
    };

    routes.push({path:'/ingresses', name:'ingresses', component: components["ingresses"]})    
</script>

<style>
</style>