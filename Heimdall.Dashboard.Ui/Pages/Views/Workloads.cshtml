<template id="workloads">
  <div class="pl-2 pr-4 w-100">
    <div class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Workloads</span>
    </div>
        
    <vue-table :columns="columns" :initial-sort="sorting" :data="workloads" :namespaces="namespaces" :loading="loading" :search="search"></vue-table>
        
  </div>
</template>

<script type="module">
import { ref, watch, onMounted } from 'vue'

let setup = (props, ctx) => {  
  const loading = ref(true);               
  const clusterWorkloads = ref([]);
  const clusterCronJobs = ref([]);
  const clusterDaemonSets = ref([]);
  const clusterJobs = ref([]);
  const clusterStatefulSets = ref([]);
  
  const workloads = ref([{
    kind:"Deployment", pods: "",
    metadata:{ name:"some-service-thingy", namespace: "service-ns", creationTimestamp: "2023-02-11T14:48:00.000Z" },
    status:{ replicas: 2, readyReplicas: 1, conditions: [{type:'Available'}, {type:'Progressing'}] }
  }]);

  let formatWorkloadAge = (row) => {
      var DT = window.DateTime || luxon.DateTime;
      const unit = ["years", "days", "hours", "minutes", "seconds", "milliseconds"]
      var date = DT.now();
  
      var newDatetime = DT.fromISO(String(row.metadata.creationTimestamp));
      return { content:'' + toHuman(newDatetime.diff(date, unit)), classes: '' };
  };
    
  const sorting = ref([{ id:"name", sort: "asc" }, { id:"namespace", sort: "desc" }]);
  const columns = ref([
    { header:"Name", id:"name", classes:"grow shrink truncate 2xl:w-64 xl:w-52 lg:w-40", 
      accessor: row => row.metadata.name },
    { header:"Namespace", id:"namespace", classes:"truncate 2xl:w-52 xl:w-44 lg:w-32", 
      accessor: row => row.metadata.namespace, formatter:'namespace' },
    { header:"Type", id:"kind", canSort:false, classes:"truncate 2xl:w-48 xl:w-40 lg:w-32", 
      accessor: row => row.kind },
    { header:"Pods", id:"pods", canSort:false, canFilter:false, classes:"2xl:w-52 xl:w-44 lg:w-32", 
      accessor: row => row.status, formatter:'deployment-lights' },
    { header:"Age", id:"age", sorter:"text", classes:"w-40",
      accessor: row => row.metadata.creationTimestamp, formatter:formatWorkloadAge },
    { header:"Conditions", id:"status", canSort:false, classes:"truncate 2xl:w-64 xl:w-52 lg:w-44", 
      accessor: row => row.status, formatter:'deployment-conditions' },
  ]);
  
  let updateWorkloads = () => {
    if (!clusterWorkloads.value) return;
    if (!clusterDaemonSets.value) return;
    if (!clusterCronJobs.value) return;
    if (!clusterJobs.value) return;
    if (!clusterStatefulSets.value) return;
    
    let items = [clusterWorkloads.value, clusterDaemonSets.value.filter(x => x.status.desiredNumberScheduled > 0), clusterCronJobs.value, clusterJobs.value, clusterStatefulSets.value];
    
    let result = items.flat().filter(x => !!x);
    
    if (props.filters?.length){
        result = result.filter(x => filterName(x, props.filters))
    }
    
    workloads.value = result;
    loading.value = false;
  }
  
  watch([() => props.filters, () => props.namespaces, clusterWorkloads, clusterCronJobs, clusterDaemonSets, clusterJobs, clusterStatefulSets], updateWorkloads);
  
  onMounted(async () => {
    var host = window.location.origin;
    streamResults(host + '/k8s/apis/apps/v1/deployments', j => clusterWorkloads.value = j)
    streamResults(host + '/k8s/apis/apps/v1/daemonsets', j => clusterDaemonSets.value = j)
    streamResults(host + '/k8s/apis/apps/v1/statefulsets', j => clusterStatefulSets.value = j)
    streamResults(host + '/k8s/apis/batch/v1/cronjobs', j => clusterCronJobs.value = j)
    streamResults(host + '/k8s/apis/batch/v1/jobs', j => clusterJobs.value = j)
  });

  return { 
    loading, sorting, workloads, columns, formatWorkloadAge,
    clusterWorkloads, clusterCronJobs, clusterDaemonSets, clusterJobs, clusterStatefulSets,
    updateWorkloads
  }
}

components["workloads"] = { template: "#workloads", props: ['namespaces', 'search', 'filters'], setup };
routes.push({path:'/workloads', name:'workloads', component: components["workloads"]})
</script>
