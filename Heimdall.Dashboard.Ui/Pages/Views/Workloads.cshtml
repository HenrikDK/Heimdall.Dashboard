<template id="workloads">
    <div class="pl-2 pr-4 w-100">
        <div class="flex my-2 items-center">
            <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Workloads</span>
        </div>
        
        <template v-if="workloads && workloads.length > 0">
            <vuetable :columns="columns" :initial-sort="sorting" :data="workloads" :namespaces="namespaces" :search="search"></vuetable>
        </template>
        
        <br/>
        
        <div class="flex justify-around mb-4 mt-1">
            <div class="graph">
                <v-chart :option="workloadsAvailable" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="podsAvailable" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
        </div>
        
        <br/><br/>
        
    </div>
</template>

<script type="module">
    function formatDeploymentStatus(row){
        if (!row.kind) return "";
        let result = "";
        if (["DaemonSet", "StatefulSet"].includes(row.kind))
        {
            result += '<div class="px-1 text-green-500">Running</div>'
        }
        
        if (row.kind === "Deployment")
        {
            let conditions = row.status.conditions;
            result += '<div class="flex">';
            result += conditions.map(x => x.type).sort().map(x => {
              let color = x === "Available" ? "text-green-500" : "text-blue-500";
              return `<div class="px-1 ${color}">${x}</div>`  
            }).join('');
            result += '</div>'
        }
        
        if (row.kind === "Job")
        {
            let conditions = row.status.conditions;
            result += conditions.map(x => `<div class="px-1 text-green-500">${x.type}</div>`).join('');
        }
         
        if (row.kind === "CronJob")
        {
            let active = row.status.active;
            if (active){
                result += '<div class="px-1 text-green-500">Running</div>'
            }else {
                result += '<div class="px-1 text-grey-300">Waiting</div>'
            }
        }
        
        return { content:'<div class="flex">' + result + '</div>', classes: ''};           
    }

    function formatWorkloadAge(row){
        var DT = window.DateTime || luxon.DateTime;
        var invalid = "";
        const unit = ["years", "days", "hours", "minutes", "seconds", "milliseconds"]
        var date = DT.now();
    
        var newDatetime = DT.fromISO(String(row.metadata.creationTimestamp));
        return { content:'' + toHuman(newDatetime.diff(date, unit)), classes: '' };
    }
    
    function formatPods(row){
        if (!row.kind) return "";
        let result = "";
        let waiting = 0;
        let ready = 0;
        
        if (row.kind === "DaemonSet")
        {
            let scheduled = row.status.currentNumberScheduled;
            ready = row.status.numberReady;
            
            if (scheduled > ready){
                waiting = scheduled - ready;
            }
        }
        
        if (row.kind === "StatefulSet")
        {
            let desired = row.status.replicas;
            ready = row.status.currentReplicas;
            if (desired > ready){
                waiting = desired - ready;
            }
        }        
        
        if (row.kind === "Deployment")
        {
            let scheduled = row.status.replicas;
            ready = row.status.readyReplicas;
            if (scheduled > ready){
                waiting = scheduled - ready;
            }
        }
        
        if (row.kind === "Job")
        {
            waiting = row.status.ready;
            ready = row.status.succeeded;
        }
         
        if (row.kind === "CronJob")
        {
            ready = row.status.active;
        }
        result += [...Array(waiting)].map(x => '<div class="h-4 w-4 mr-1 bg-gray-300 dark:bg-zinc-600 rounded-sm"></div>').join('');
        result += [...Array(ready)].map(x => '<div class="h-4 w-4 mr-1 bg-green-500 dark:bg-green-500 rounded-sm"></div>').join('');
         
        return {content: '<div class="flex">' + result + '</div>', classes:'py-0.5'};
    }
    
    import {useDark} from "vueuse";
    const isDark = useDark()

    components["workloads"] = {
        template: "#workloads",
        data() {
            return {
                workloads: [{
                    kind:"Deployment", pods: "",
                    metadata:{ name:"some-service-thingy", namespace: "service-ns", creationTimestamp: "2023-02-11T14:48:00.000Z" },
                    status:{ replicas: 2, readyReplicas: 1, conditions: [{type:'Available'}, {type:'Progressing'}] }
                }],
                columns:[
                    { header:"Type", name:"kind", classes:"w-48", canSort:false },
                    { header:"Name", name:"metadata.name", classes:"w-64" },
                    { header:"Namespace", name:"metadata.namespace", sorter:"string", classes:"w-64" },
                    { header:"Pods", name:"pods", formatter:formatPods, canSort:false, raw:true, canFilter:false, classes: 'grow shrink' },
                    { header:"Age", name:"metadata.creationTimestamp", formatter:formatWorkloadAge, sorter:"text", classes:"w-40" },
                    { header:"Status", field:"status", formatter:formatDeploymentStatus, raw:true, canSort:false, classes: 'w-64' },                    
                ],
                sorting: [],
                clusterWorkloads: null,
                clusterCronJobs: null,
                clusterDaemonSets: null,
                clusterJobs: null,
                clusterStatefulSets: null,
                initOptions: { renderer: "svg" },
                isDark: isDark
            }
        },
        props: ['namespaces', 'search', 'filters'],        
        computed: {
            workloadsAvailable: () => workloadsReady(),
            podsAvailable: () => podReady(),
        },
        methods: {
            updateWorkloads(){
                if (!this.clusterWorkloads) return;
                if (!this.clusterDaemonSets) return;
                if (!this.clusterCronJobs) return;
                if (!this.clusterJobs) return;
                if (!this.clusterStatefulSets) return;
                
                let items = [this.clusterWorkloads, this.clusterDaemonSets, this.clusterCronJobs, this.clusterJobs, this.clusterStatefulSets];
                
                let result = items.flat().filter(x => !!x);
                
                if (this.filters?.length){
                    result = result.filter(x => filterName(x, this.filters))
                }
                
                this.workloads = result;
            }
        },
        watch: {
            filters(){this.updateWorkloads()},
            namespace(){this.updateWorkloads()},
            clusterWorkloads(){this.updateWorkloads()},
            clusterCronJobs(){this.updateWorkloads()},
            clusterDaemonSets(){this.updateWorkloads()},
            clusterJobs(){this.updateWorkloads()},
            clusterStatefulSets(){this.updateWorkloads()},
        },
        async mounted() {
          var host = window.location.origin;
          streamResults(host + '/k8s/apis/apps/v1/deployments', j => this.clusterWorkloads = j)
          streamResults(host + '/k8s/apis/apps/v1/daemonsets', j => this.clusterDaemonSets = j)
          streamResults(host + '/k8s/apis/apps/v1/statefulsets', j => this.clusterStatefulSets = j)
          streamResults(host + '/k8s/apis/batch/v1/cronjobs', j => this.clusterCronJobs = j)
          streamResults(host + '/k8s/apis/batch/v1/jobs', j => this.clusterJobs = j)
        }
    };

    routes.push({path:'/workloads', name:'workloads', component: components["workloads"]})
</script>

<style>
</style>