<template id="cluster">
  <div class="pl-2 pr-4 w-100">

    <div class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Cluster</span>
    </div>

    <br/>
        
    <div class="flex justify-between mb-4 mt-1">
      <div class="wide-graph">
        <v-chart :option="charts.cluster.performance" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="large-graph">
        <v-chart :option="charts.cluster.cpus" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="large-graph">
        <v-chart :option="charts.cluster.memory" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
    </div>
        
    <div class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Workloads</span>
    </div>
        
    <br/>
        
    <div class="flex justify-between mb-4 mt-1">
      <div class="graph">
        <v-chart :option="charts.workloads.pods" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="graph">
        <v-chart :option="charts.workloads.deployments" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="graph">
        <v-chart :option="charts.workloads.daemonsets" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="graph">
        <v-chart :option="charts.workloads.statefullsets" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="graph">
        <v-chart :option="charts.workloads.replicasets" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="graph">
        <v-chart :option="charts.workloads.jobs" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="graph">
        <v-chart :option="charts.workloads.cronjobs" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
    </div>
  </div>
</template>

<script type="module">
import { ref, watch, onMounted } from 'vue'
import { useDark } from "vueuse";

let setup = (props, ctx) => {
  const isDark = useDark();
  const initOptions = ref({ renderer: "svg" });
  const cluster = ref({
    pods: null,
    deployments: null,
    daemonSets: null,
    statefulSets: null,
    replicaSets: null,
    jobs: null,
    cronJobs: null,
  });
  const metrics = ref({
      kubeMemory: null,
      containerMemory: null,
      nodeMemory: null,
      kubeCpu: null,
      nodeCpu: null,
  });
  
  const charts = ref({
    cluster:{
        performance: historic(),
        cpus: current('CPU'),
        memory: current('Memory')
    },
    workloads:{
        pods: workload('Pods', 0, 0),
        deployments: workload('Deployments', 0, 0),
        daemonsets: workload('Daemon Sets', 0, 0),
        statefullsets: workload('Stateful Sets', 0, 0),
        replicasets: workload('Replica Sets', 0, 0),
        jobs: workload('Jobs', 0, 0),
        cronjobs: workload('Cron Jobs', 0, 0),
    }
  });

  let filterNamespace = (values) => {
    let filtered = values;
    if (props.namespaces.length > 0){
      filtered = values?.filter(x => props.namespaces.some(y => x.metadata.namespace === y));
    }
    return filtered;
  };
  
  let updateClusterPods = async () => {
    let filtered = filterNamespace(cluster.value.pods);
    let running = filtered?.filter(x => (x.status?.phase === "Running" && x.status?.containerStatuses.every(y => y.state.running)) 
        || x.status?.phase === "Succeeded").length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.pods = workload('Pods', running, pending);
  };
  
  let updateClusterDeployments = async () => {
    let filtered = filterNamespace(cluster.value.deployments);
    let running = filtered?.filter(x => x.status?.replicas === x.status?.readyReplicas).length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.deployments = workload('Deployments', running, pending);
  };
  
  let updateClusterJobs = async () => {
    let filtered = filterNamespace(cluster.value.jobs);
    let running = filtered?.filter(x => x.status?.succeeded).length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.jobs = workload('Jobs', running, pending);                
  };
  
  let updateClusterCronJobs = async () => {
    let filtered = filterNamespace(cluster.value.cronJobs);
    let running = filtered?.filter(x => x.status?.lastSuccessfulTime).length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.cronjobs = workload('Cron Jobs', running, pending);
  };
  
  let updateClusterStatefulSets = async () => {
    let filtered = filterNamespace(cluster.value.statefulSets);
    let running = filtered?.filter(x => x.status?.replicas === x.status?.readyReplicas).length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.statefullsets = workload('Stateful Sets', running, pending);
  };
  
  let updateClusterReplicaSets = async () => {
    let filtered = filterNamespace(cluster.value.replicaSets);
    let running = filtered?.filter(x => x.status?.replicas === 0 || x.status?.replicas === x.status?.readyReplicas).length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.replicasets = workload('Replica Sets', running, pending);
  };
  
  let updateClusterDaemonSets = async () => {
    let filtered = filterNamespace(cluster.value.daemonSets);
    let running = filtered?.filter(x => x.status?.currentNumberScheduled === x.status?.numberReady).length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.daemonsets = workload('Daemon Sets', running, pending);
  };
  
  let updateCpu = async () => {
    if (!metrics.value.nodeCpu || metrics.value.nodeCpu?.length === 0 || !metrics.value.kubeCpu || metrics.value.kubeCpu?.length === 0) return;
    
    let capacity = getMetricLastPoints(metrics.value.kubeCpu, 'kube_node_status_capacity');
    let requestValue = getMetricLastPoints(metrics.value.kubeCpu, 'kube_pod_container_resource_requests');
    let requestPct = requestValue / capacity * 100;
    let requests = {pct: requestPct.toFixed(2), units: requestValue.toFixed(2) };
    
    let limitValue = getMetricLastPoints(metrics.value.kubeCpu, 'kube_pod_container_resource_limits');
    let limitPct = limitValue / capacity * 100;
    if (limitPct > 100){
        limitPct = 100;
    }
    let limits = {pct: limitPct.toFixed(2), units: limitValue.toFixed(2) };
    
    let usageValue = getMetricLastPoints(metrics.value.nodeCpu);
    let usagePct = usageValue / capacity * 100;
    let usage = {pct: usagePct.toFixed(2), units: usageValue.toFixed(2) };
    
    charts.value.cluster.cpus = current('CPU', 'vCores', usage, requests, limits);
  };
  
  let updateMemory = async () => {
    if (!metrics.value.kubeMemory || metrics.value.kubeMemory?.length === 0 || !metrics.value.nodeMemory || metrics.value.nodeMemory?.length === 0) return;
    
    let capacity = getMetricLastPoints(metrics.value.kubeMemory, 'kube_node_status_capacity');
    let requestValue = getMetricLastPoints(metrics.value.kubeMemory, 'kube_pod_container_resource_requests');
    let requestPct = requestValue / capacity * 100;
    let requests = {pct: requestPct.toFixed(2), units: (requestValue / 1024 / 1024 / 1024).toFixed(2) };
    
    let limitValue = getMetricLastPoints(metrics.value.kubeMemory, 'kube_pod_container_resource_limits');
    let limitPct = limitValue / capacity * 100;
    if (limitPct > 100){
        limitPct = 100;
    }
    let limits = {pct: limitPct.toFixed(2), units: (limitValue / 1024 / 1024 / 1024).toFixed(2) };              
    
    let usageValue = getMetricLastPoints(metrics.value.nodeMemory);              
    let usagePct = usageValue / capacity * 100;
    let usage = {pct: usagePct.toFixed(2), units: (usageValue / 1024 / 1024 / 1024).toFixed(2) };
    charts.value.cluster.memory = current('Memory', 'GiB', usage, requests, limits);
  };

  let updateHistory = async () => {
    if (!metrics.value.kubeMemory || metrics.value.kubeMemory?.length === 0 || !metrics.value.nodeMemory || metrics.value.nodeMemory?.length === 0) return;
    if (!metrics.value.nodeCpu || metrics.value.nodeCpu?.length === 0 || !metrics.value.kubeCpu || metrics.value.kubeCpu?.length === 0) return;
    
    let memoryCapacity = getMetricLastPoints(metrics.value.kubeMemory, 'kube_node_status_capacity');
    let memoryUsage = getMetricSeries(metrics.value.nodeMemory);
    // due to query differences, memory usage result is 2 entries longer than compute usage, so we drop the first 2 (oldest) entries
    memoryUsage.shift();
    memoryUsage.shift();
    let time = memoryUsage.map(x => luxon.DateTime.fromMillis(x[0] * 1000).toFormat('HH:mm'));
    let memory = {
        max: (memoryCapacity / 1024 / 1024 / 1024).toFixed(2),
        data: memoryUsage.map(x => (x[1] / 1024 / 1024 / 1024).toFixed(2))
    }
    
    let computeCapacity = getMetricLastPoints(metrics.value.kubeCpu, 'kube_node_status_capacity');
    let computeUsage = getMetricSeries(metrics.value.nodeCpu);
    let compute = {
        max: computeCapacity.toFixed(2),
        data: computeUsage.map(x => parseFloat(x[1]).toFixed(2))
    }
    
    charts.value.cluster.performance = historic(memory, compute, time);              
  };
  
  let updateMetrics = async () => {
    if (props.nodes.length > 0)
    {
      var host = window.location.origin;
      streamMetrics(host + '/prometheus/api/v1' + getMetric('cluster', 'kube-memory-stats', { nodes: props.nodes }), j => metrics.value.kubeMemory = j.data.result);
      streamMetrics(host + '/prometheus/api/v1' + getMetric('cluster', 'container-memory', { nodes: props.nodes }), j => metrics.value.containerMemory = j.data.result);
      streamMetrics(host + '/prometheus/api/v1' + getMetric('cluster', 'node-memory-stats', { nodes: props.nodes }), j => metrics.value.nodeMemory = j.data.result);
      streamMetrics(host + '/prometheus/api/v1' + getMetric('cluster', 'kube-cpu-stats', { nodes: props.nodes }), j => metrics.value.kubeCpu = j.data.result);
      streamMetrics(host + '/prometheus/api/v1' + getMetric('cluster', 'node-cpu-stats', { nodes: props.nodes }), j => metrics.value.nodeCpu = j.data.result);
    }
  }
  
  watch(() => [metrics.value.nodeCpu, metrics.value.kubeCpu], () => {
    this.updateCpu(); 
    this.updateHistory();    
  });
  
  watch(() => [metrics.value.nodeMemory, metrics.value.kubeMemory], () => {
    this.updateMemory();
    this.updateHistory();    
  })
  
  watch(() => props.namespaces, () => {
    updateClusterPods();
    updateClusterDeployments();
    updateClusterJobs();
    updateClusterCronJobs();
    updateClusterStatefulSets();
    updateClusterReplicaSets();
    updateClusterDaemonSets();
  });
  
  watch(() => props.nodes, () => {
    updateMetrics();
  });
  
  watch(() => cluster.value.pods, updateClusterPods);
  watch(() => cluster.value.deployments, updateClusterDeployments);
  watch(() => cluster.value.jobs, updateClusterJobs);
  watch(() => cluster.value.cronJobs, updateClusterCronJobs);
  watch(() => cluster.value.statefulSets, updateClusterStatefulSets);
  watch(() => cluster.value.replicaSets, updateClusterReplicaSets);
  watch(() => cluster.value.daemonSets, updateClusterDaemonSets);
  
  onMounted(async () => {
    var host = window.location.origin;
    
    updateMetrics();
    
    streamResults(host + '/k8s/api/v1/pods', j => this.cluster.pods = j);
    streamResults(host + '/k8s/apis/apps/v1/deployments', j => this.cluster.deployments = j);
    streamResults(host + '/k8s/apis/apps/v1/daemonsets', j => this.cluster.daemonSets = j);
    streamResults(host + '/k8s/apis/apps/v1/statefulsets', j => this.cluster.statefulSets = j);
    streamResults(host + '/k8s/apis/apps/v1/replicasets', j => this.cluster.replicaSets = j);
    streamResults(host + '/k8s/apis/batch/v1/cronjobs', j => this.cluster.cronJobs = j);
    streamResults(host + '/k8s/apis/batch/v1/jobs', j => this.cluster.jobs = j);          
  });
    
  return {
    isDark, initOptions, cluster, metrics, charts,
    filterNamespace, 
    updateClusterPods, updateClusterDeployments, updateClusterJobs, updateClusterCronJobs, 
    updateClusterStatefulSets, updateClusterReplicaSets, updateClusterDaemonSets,
    updateCpu, updateMemory, updateHistory, updateMetrics,
    
  }
}

components["cluster"] = {template: "#cluster", props: ['namespaces', 'nodes'], setup};
routes.push({path:'/', name:'cluster',  component: components["cluster"]})
</script>
