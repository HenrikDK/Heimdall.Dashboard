<template id="cluster">
    <div class="pl-2 pr-4 w-100">

        <div class="flex my-2 items-center">
            <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Cluster</span>
        </div>

        <div class="flex my-2 items-center">
            <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Workloads</span>
        </div>
        
        <div class="flex justify-between mb-4 mt-1">
            <div class="graph">
                <v-chart :option="nodesAvailable" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="nodeCpuUsage" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="nodeMemoryUsage" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="podsAvailable" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="podCpuUsage" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="podMemoryUsage" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
        </div>
    </div>
</template>

<script type="module">
    import {useDark} from "vueuse";
    const isDark = useDark()
    
    components["cluster"] = {
        template: "#cluster",
        data() {
            return {
                initOptions: { renderer: "svg" },
                clusterPods: null,
                clusterPodMetrics: null,
                clusterNodes: null,
                clusterNodeMetrics: null,
                isDark: isDark,
                nodesAvailable: nodeReady(),
                nodeCpuUsage: nodeCpu(),
                nodeMemoryUsage: nodeMemory(),
                podsAvailable: podReady(),
                podCpuUsage: podCpu(),
                podMemoryUsage: podMemory(),
            }
        },
        methods: {
          async updateNodeGraphs() {
              
          },
          async updatePodGraphs() {
              
          },
        },
        watch: {
          clusterEvents: function (){this.updateEvents()},
        },
        props: ['namespaces', 'search'],
        async mounted() {
          var host = window.location.origin;
          streamResults(host + '/k8s/api/v1/nodes', j => this.clusterNodes = j);
          streamResults(host + '/k8s/api/v1/pods', j => this.clusterPods = j);
          streamMetrics(host + '/k8s/apis/metrics.k8s.io/v1beta1/nodes', j => this.clusterNodeMetrics = j);
          streamMetrics(host + '/k8s/apis/metrics.k8s.io/v1beta1/pods', j => this.clusterPodMetrics = j);
        }
    };
    
    routes.push({path:'/', name:'cluster',  component: components["cluster"]})
</script>
