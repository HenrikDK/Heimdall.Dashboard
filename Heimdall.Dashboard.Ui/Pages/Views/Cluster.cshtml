<template id="cluster">
    <div class="pl-2 pr-4 w-100">
        <div class="flex my-2 items-center">
            <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Cluster Overview</span>
        </div>

        <div class="flex justify-between mb-4 mt-1">
            <div class="graph">
                <v-chart :option="nodesAvailable" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="nodeCpuUsage" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="nodeMemoryUsage" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="podsAvailable" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="podCpuUsage" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="podMemoryUsage" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
        </div>
        
        <hr/>
        
        <template v-if="events.length > 0">
            <div class="flex my-2 items-center">
                <span class="text-slate-500 text-2xl font-light sans">Events</span>
            </div>
        </template>

        <div id="events-table" ref="events" v-show="events.length > 0" class="vh-80 w-full"></div>
    </div>
</template>

<script type="module">
    import { TabulatorFull as Tabulator } from 'tabulator'
    import {useDark} from "vueuse";
    const isDark = useDark()
    
    function formatMessage(cell, formatterParams, onRendered){
         let data = cell.getData();
         let fontClass = data.type === "Warning" ? "text-red-500" : ""; 
         return `<div class="${fontClass}">${data.message}</div>`;
    }

    function formatSource(cell, formatterParams, onRendered){
         let data = cell.getData();
         return `<div class="text-blue-500">${data.involvedObject.kind + ": " + data.involvedObject.name}</div>`;
    }

    components["cluster"] = {
        template: "#cluster",
        data() {
            return {
                clusterEvents: null,
                events: [],
                table: null,
                initOptions: { renderer: "svg" },
                clusterPods: null,
                clusterPodMetrics: null,
                clusterNodes: null,
                clusterNodeMetrics: null,
                isDark: isDark
            }
        },
        methods: {
              async updateEvents() {
                  if (!this.clusterEvents) return;
                  
                  const currentTime = new Date();
                  const before12Hours = new Date(currentTime.setHours(currentTime.getHours() - 12))
                  var events = this.clusterEvents.filter(x=>(new Date(x.lastTimestamp)) >= before12Hours)
                  if (events.length === 0){
                      events = this.clusterEvents.slice(0, 100);
                  }
                  
                  this.events = events;
                  this.table.setData(this.events);
                  this.table.redraw(true);
              }
          },
          watch: {
            clusterEvents: function (){this.updateEvents()},
        },
        props: ['namespaces', 'search'],
        computed: {
            nodesAvailable: () => nodeReady(),        
            nodeCpuUsage: () => nodeCpu(),
            nodeMemoryUsage: () => nodeMemory(),
            podsAvailable: () => podReady(),
            podCpuUsage: () => podCpu(),
            podMemoryUsage: () => podMemory(),
        },
        async mounted() {
          this.table = new Tabulator(this.$refs.events, {
            maxHeight:"80vh",
            layout:"fitColumns",
            movableColumns: true,
            persistence:true,
            persistenceMode:true,
            data: this.events,
            reactiveData:true,
            columns: [
                {title:"Type", field:"type", sorter:"string", minWidth:150},
                {title:"Message", field:"message", formatter:formatMessage, sorter:"string", minWidth:350, headerSort:false},
                {title:"Namespace", field:"involvedObject.namespace", sorter:"string", minWidth:150},
                {title:"Source", field:"involvedObject.name", formatter:formatSource, sorter:"string", minWidth:250, headerSort:false},
                {title:"Events", field:"count", sorter:"number", minWidth:100},
                {title:"Last Seen", field:"lastTimestamp", formatter:formatAge, minWidth:100,
                 sorter:"datetime", sorterParams:{
                     format:"iso",
                     alignEmptyValues:"top",
                 }},
            ],
          });
          
          var host = window.location.origin;
          streamResults(host + '/k8s/api/v1/events', j => this.clusterEvents = j);
          streamResults(host + '/k8s/api/v1/nodes', j => this.clusterNodes = j);
          streamResults(host + '/k8s/api/v1/pods', j => this.clusterPods = j);
          //streamResults(host + '/k8s/apis/metrics.k8s.io/v1beta1/nodes', j => this.clusterNodeMetrics = j);
          //streamResults(host + '/k8s/apis/metrics.k8s.io/v1beta1/pods', j => this.clusterPodMetrics = j);
        }
    };
    
    routes.push({path:'/', name:'cluster',  component: components["cluster"]})
</script>
