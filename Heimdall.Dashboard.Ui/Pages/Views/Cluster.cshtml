<template id="cluster">
    <div class="pl-2 pr-4 w-100">

        <div class="flex my-2 items-center">
            <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Cluster</span>
        </div>

        <br/>
        
        <div class="flex justify-between mb-4 mt-1">
            <div class="wide-graph">
                <v-chart :option="cluster.performance" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="large-graph">
                <v-chart :option="cluster.cpus" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="large-graph">
                <v-chart :option="cluster.memory" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
        </div>
        
        <div class="flex my-2 items-center">
            <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Workloads</span>
        </div>
        
        <br/>
        
        <div class="flex justify-between mb-4 mt-1">
            <div class="graph">
                <v-chart :option="workloads.pods" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="workloads.deployments" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="workloads.daemonsets" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="workloads.statefullsets" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="workloads.replicasets" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="workloads.jobs" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="workloads.cronjobs" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
            </div>
        </div>
    </div>
</template>

<script type="module">
    import {useDark} from "vueuse";
    const isDark = useDark();
    
    components["cluster"] = {
        template: "#cluster",
        data() {
            return {
                initOptions: { renderer: "svg" },
                clusterPods: null,
                clusterDeployments: null,
                clusterDaemonSets: null,
                clusterStatefulSets: null,
                clusterReplicaSets: null,
                clusterJobs: null,
                clusterCronJobs: null,
                
                isDark: isDark,
                cluster:{
                    performance: historic(),
                    cpus: current('CPU'),
                    memory: current('Memory')
                },
                workloads:{
                    pods: workload('Pods', 0, 0),
                    deployments: workload('Deployments', 0, 0),
                    daemonsets: workload('Daemon Sets', 0, 0),
                    statefullsets: workload('Stateful Sets', 0, 0),
                    replicasets: workload('Replica Sets', 0, 0),
                    jobs: workload('Jobs', 0, 0),
                    cronjobs: workload('Cron Jobs', 0, 0),
                }
            }
        },
        methods: {
          filterNamespace(values){
            let filtered = values;
            if (this.$props.namespaces.length > 0){
                filtered = values?.filter(x => this.$props.namespaces.some(y => x.metadata.namespace === y));
            }
            return filtered;
          },
          async updateClusterPods() {
              let filtered = this.filterNamespace(this.clusterPods);
              let running = filtered?.filter(x => (x.status?.phase === "Running" && x.status?.containerStatuses.every(y => y.state.running)) 
                  || x.status?.phase === "Succeeded").length ?? 0;
              let pending = (filtered?.length ?? 0) - running;
              this.workloads.pods = workload('Pods', running, pending);
          },
          async updateClusterDeployments() {
              let filtered = this.filterNamespace(this.clusterDeployments);
              let running = filtered?.filter(x => x.status?.replicas === x.status?.readyReplicas).length ?? 0;
              let pending = (filtered?.length ?? 0) - running;
              this.workloads.deployments = workload('Deployments', running, pending);
          },
          async updateClusterJobs() {
              let filtered = this.filterNamespace(this.clusterJobs);
              let running = filtered?.filter(x => x.status?.succeeded).length ?? 0;
              let pending = (filtered?.length ?? 0) - running;
              this.workloads.jobs = workload('Jobs', running, pending);                
          },
          async updateClusterCronJobs() {
              let filtered = this.filterNamespace(this.clusterCronJobs);
              let running = filtered?.filter(x => x.status?.lastSuccessfulTime).length ?? 0;
              let pending = (filtered?.length ?? 0) - running;
              this.workloads.cronjobs = workload('Cron Jobs', running, pending);
          },
          async updateClusterStatefulSets() {
              let filtered = this.filterNamespace(this.clusterStatefulSets);
              let running = filtered?.filter(x => x.status?.replicas === x.status?.readyReplicas).length ?? 0;
              let pending = (filtered?.length ?? 0) - running;
              this.workloads.statefullsets = workload('Stateful Sets', running, pending);
          },
          async updateClusterReplicaSets() {
              let filtered = this.filterNamespace(this.clusterReplicaSets);
              let running = filtered?.filter(x => x.status?.replicas === x.status?.readyReplicas).length ?? 0;
              let pending = (filtered?.length ?? 0) - running;
              this.workloads.replicasets = workload('Replica Sets', running, pending);
          },
          async updateClusterDaemonSets() {
              let filtered = this.filterNamespace(this.clusterDaemonSets);
              let running = filtered?.filter(x => x.status.currentNumberScheduled === x.status.numberReady).length ?? 0;
              let pending = (filtered?.length ?? 0) - running;
              this.workloads.daemonsets = workload('Daemon Sets', running, pending);
          },
          async updateNodeGraphs() {
              
          },
          async updatePodGraphs() {
              
          },
        },
        
        watch: {
            async namespaces() {
                this.updateClusterPods();
                this.updateClusterDeployments();
                this.updateClusterJobs();
                this.updateClusterCronJobs();
                this.updateClusterStatefulSets();
                this.updateClusterReplicaSets();
                this.updateClusterDaemonSets();
            },
            async clusterPods(){
                this.updateClusterPods();
            },
            async clusterDeployments() {
                this.updateClusterDeployments();
            },
            async clusterJobs() {
                this.updateClusterJobs();            
            },
            async clusterCronJobs() {
                this.updateClusterCronJobs();
            },
            async clusterStatefulSets() {
                this.updateClusterStatefulSets();
            },
            async clusterReplicaSets() {
                this.updateClusterReplicaSets();
            },
            async clusterDaemonSets() {
                this.updateClusterDaemonSets();
            }
        },
        props: ['namespaces'],
        async mounted() {
          var host = window.location.origin;
          
          streamResults(host + '/k8s/api/v1/pods', j => this.clusterPods = j);
          streamResults(host + '/k8s/apis/apps/v1/deployments', j => this.clusterDeployments = j)
          streamResults(host + '/k8s/apis/apps/v1/daemonsets', j => this.clusterDaemonSets = j)
          streamResults(host + '/k8s/apis/apps/v1/statefulsets', j => this.clusterStatefulSets = j)
          streamResults(host + '/k8s/apis/apps/v1/replicasets', j => this.clusterReplicaSets = j)
          streamResults(host + '/k8s/apis/batch/v1/cronjobs', j => this.clusterCronJobs = j)
          streamResults(host + '/k8s/apis/batch/v1/jobs', j => this.clusterJobs = j)          
        }
    };
    
    routes.push({path:'/', name:'cluster',  component: components["cluster"]})
</script>
