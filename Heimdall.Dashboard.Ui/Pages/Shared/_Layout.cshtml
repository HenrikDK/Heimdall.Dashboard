<!DOCTYPE html>
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="icon" href="/favicon.svg">
    
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.3"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon@3.0.4"></script>
    
    <script src="https://cdn.tailwindcss.com"></script> 

    <script>
        var components = {};
        var routes = []
    
        tailwind.config = {
        darkMode: 'class',
          theme: {
            extend: {
              colors: {
                k8s: '#326ce5',
                dark: '#0f0f0f'
              },
            }
          }
        }
    </script>
    
    <script type="importmap">
    {
        "imports": {
            "vue": "https://cdn.jsdelivr.net/npm/vue@3.2.45/dist/vue.esm-browser.js",
            "@@vue/devtools-api": "https://cdn.jsdelivr.net/npm/@@vue/devtools-api@6.5.0/lib/esm/index.min.js",

            "vueuse": "https://cdn.jsdelivr.net/npm/@@vueuse/core@9.12.0/index.mjs",
            "@@vueuse/shared": "https://cdn.jsdelivr.net/npm/@@vueuse/shared@9.12.0/index.mjs",

            "@@floating-ui/core": "https://cdn.jsdelivr.net/npm/@@floating-ui/core@1.2.4/dist/floating-ui.core.browser.min.mjs",
            "floating-ui": "https://cdn.jsdelivr.net/npm/@@floating-ui/dom@1.2.4/dist/floating-ui.dom.browser.min.mjs",
            
            "vue-router": "https://cdn.jsdelivr.net/npm/vue-router@4.1.6/dist/vue-router.esm-browser.js",
            
            "vue-echarts": "https://cdn.jsdelivr.net/npm/vue-echarts@6.5.4/dist/index.esm.min.js",
            "vue-demi": "https://cdn.jsdelivr.net/npm/vue-demi@0.13.11/lib/index.mjs",
            "resize-detector": "https://cdn.jsdelivr.net/npm/resize-detector@0.3.0/esm/index.js",
            "echarts/core": "https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.esm.min.js"            
        }
    }
    </script>
    
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <script src="~/js/api.js" asp-append-version="true"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
</head>
<body class="dark:bg-dark">

<div id="app">
    @RenderBody()
</div>

@RenderSection("VueComponents", required: false)

@RenderSection("Scripts", required: false)

<script type="module">
import { createApp } from 'vue'
import { createRouter, createWebHashHistory } from 'vue-router'
import { default as ECharts } from 'vue-echarts'
    
components['v-chart'] = ECharts;

let scrollPositions = null;

function beforeEach(to, from, next){
  if (scrollPositions === null){
    let stored = window.localStorage.getItem('scroll-state');
    if (stored){
      scrollPositions = JSON.parse(stored);
    } else { 
      scrollPositions = {};
    }
  }
  
  const contentEl = document.getElementById('content');
  scrollPositions[from.fullPath] = {
    top: contentEl.scrollTop,
    left: contentEl.scrollLeft
  };
  
  window.localStorage.setItem('scroll-state', JSON.stringify(scrollPositions));
  next();
}

function scrollBehavior(to, from, savedPosition) {
  if (to.fullPath === from.fullPath) {
    return;
  }
  
  if (scrollPositions === null){
    let stored = window.localStorage.getItem('scroll-state')
    if (stored){
      scrollPositions = JSON.parse(stored)
    } else { 
      scrollPositions = {}
    }
  }

  const contentEl = document.getElementById('content');
  console.assert(contentEl !== null, 'Scroll container not found');

  let savedPos = scrollPositions[to.fullPath]
  if (savedPos) {
    contentEl.scroll(savedPos);
  } else {    
    contentEl.scroll({
      top: 0,
      left: 0
    });
  }
}

const router = createRouter({
  history: createWebHashHistory(),
  routes,
  scrollBehavior,
})

router.beforeEach(beforeEach)

const app = createApp({
methods: {},
data() {
    return {
        filters: [],
        namespaces: [],
        search: "",
    }
}})
Object.entries(components).forEach(([k,v]) =>{
    app.component(k, v)
});
app.use(router)
app.mount('#app');
</script>

</body>
</html>