<template id="log-viewer">
  <div ref="parentRef" :style="{contain: 'strict', overflow: 'auto', height: '85vh'}"
      class="border border-gray-300 rounded-md
      cursor-text font-mono text-xs 
      dark:border-zinc dark:bg-black dark:border-white/[.4] dark:text-white/[.9]">
    
    <div :style="{ height: `${virtualizer.getTotalSize()}px`, position: 'relative', width: widthStyle }">

        <div v-if="events.length == 0" class="justify-center w-full flex py-2">
            <spinner></spinner>
        </div>

        <div v-for="virtualRow in virtualizer.getVirtualItems()" class="px-2 break-words leading-5 break-all dark:hover:bg-zinc-900 hover:bg-gray-100"
          :key="virtualRow.key + '-' + updateId"
          :data-index="virtualRow.index"
          :ref="measureElement"
          :style="{ position: 'absolute', top: 0, left: 0, width: widthStyle, transform: `translateY(${virtualRow.start}px)` }"
          >

          <span>{{ logEvents[virtualRow.index] }}</pre>
        </div>
      
    </div>
  </div>

</template>

<script type="module">
import { ref, toRef, watch, computed, onMounted, nextTick } from 'vue'
import { useVirtualizer } from '@@tanstack/vue-virtual'

let setup = (props, ctx) => {
  const parentRef = ref(null);
  const updateId = ref(0);
  const logEvents = toRef(props, 'events')

  let virtualizerOptions = computed(() => {
    return {
      count: logEvents.value.length,
      estimateSize: () => 30,
      overscan: 5,
      getScrollElement: () => parentRef.value,
    }
  })

  let widthStyle = computed(() => { return props.wrap ? '100%' : 'max-content'});

  const virtualizer = useVirtualizer(virtualizerOptions)

  let virtualRows = virtualizer.value.getVirtualItems()

  const measureElement = (el) => {
    nextTick(() => {
      if (!el) return;
      virtualizer.value.measureElement(el);
    });
  };

  watch(logEvents, () => {
    updateId.value += 1;
    virtualRows = virtualizer.value.getVirtualItems();
  })

  /* 
  // Initial scroll to bottom
  useEffect(() => {
    setTimeout(() => {
      rowVirtualizer.scrollToIndex(visibleLogs.get().length - 1, { align: 'end', smoothScroll: false });
    }, 200)
  }, [model.logTabData.get()?.selectedPodId])

  // To bottom
  useEffect(() => {
    rowVirtualizer.scrollToIndex(visibleLogs.get().length - 1, { align: 'end', smoothScroll: false });
  }, [model.logTabData.get()]);

  // scroll to search
   useEffect(() => {
    rowVirtualizer.scrollToIndex(model.searchStore.occurrences[model.searchStore.activeOverlayIndex], { align: 'end', smoothScroll: false });
  }, [model.searchStore.activeOverlayIndex])
  */

  return {virtualizer, logEvents, virtualizerOptions, measureElement, virtualRows, widthStyle, parentRef, updateId}
}

components["log-viewer"] = { template: "#log-viewer", emits: [], setup, 
  props: {
    events: Array,
    wrap: Boolean,
    direction: String
  }
};
</script>
