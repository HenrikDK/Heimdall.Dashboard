<template id="log-viewer">
  <div ref="parentRef" :style="{contain: 'strict', overflow: 'auto', height: '85vh'}"
      class="border border-gray-300 rounded-md
      cursor-text font-mono text-xs 
      dark:border-zinc dark:bg-black dark:border-white/[.4] dark:text-white/[.9]">
    
    <div :style="{ height: `${virtualizer.getTotalSize()}px`, position: 'relative', width: widthStyle }">

        <div v-if="events.length == 0" class="justify-center w-full flex py-2">
            <spinner></spinner>
        </div>

        <div v-for="virtualRow in virtualizer.getVirtualItems()" class="px-2 break-words leading-5 break-all dark:hover:bg-zinc-900 hover:bg-gray-100"
          :key="virtualRow.key + '-' + updateId"
          :data-index="virtualRow.index"
          :ref="measureElement"
          :style="{ position: 'absolute', top: `${virtualRow.start}px`, left: 0, width: widthStyle }"
          >
<!--          <div v-html="getRow(virtualRow.index)"><div> -->
          <span>{{ logEvents[virtualRow.index] }}</span>
        </div>

        <div class="sticky top-5 flex justify-end">
          <div v-if="direction == 'up' && !isBottom" title="To bottom" alt="To bottom" @@click="toBottom"
              class="flex px-4 py-2 me-8 rounded-lg items-center justify-center border cursor-pointer
                border-gray-300 bg-white fill-gray-300
                hover:border-sky-500 hover:bg-sky-100 hover:fill-sky-500
                dark:border-white/[.4] dark:text-white/[.6]
                data-enabled:dark:bg-zinc-700 dark:data-enabled:border-white
                dark:hover:border-white dark:hover:text-white dark:hover:fill-white dark:hover:bg-zinc-700
                dark:bg-zinc-900">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
              <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 13.5 12 21m0 0-7.5-7.5M12 21V3" />
            </svg>
          </div>
          <div v-if="direction == 'down' && !isTop" title="To top" alt="To top" @@click="toTop"
              class="flex px-4 py-2 me-8 rounded-lg items-center justify-center border cursor-pointer
                border-gray-300 bg-white fill-gray-300
                hover:border-sky-500 hover:bg-sky-100 hover:fill-sky-500
                dark:border-white/[.4] dark:text-white/[.6]
                data-enabled:dark:bg-zinc-700 dark:data-enabled:border-white
                dark:hover:border-white dark:hover:text-white dark:hover:fill-white dark:hover:bg-zinc-700
                dark:bg-zinc-900">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 10.5 12 3m0 0 7.5 7.5M12 3v18" />
              </svg>
          </div>
        </div>

    </div>
  </div>
</template>

<script type="module">
import { ref, toRef, watch, computed, onMounted, nextTick } from 'vue'
import { useVirtualizer } from '@@tanstack/vue-virtual'

let setup = (props, ctx) => {
  const parentRef = ref(null);
  const updateId = ref(0);
  const loaded = ref(false);
  const logEvents = ref([]);
  const occurrences = ref([]);
  const overlays = ref([]);
  const activeOverlay = ref(-1);
  const query = ref('');

  let virtualizerOptions = computed(() => {
    return {
      count: logEvents.value.length,
      estimateSize: () => 30,
      overscan: 20,
      getScrollElement: () => parentRef.value,
    }
  })

  let getRow = (i) => {
    let row = logEvents.value[i]
    let overlays = undefined;
    if (occurrences.value.length > 0){
      overlays = occurrences.value.fiter(x => x[0] === i)
    }
    content = [];
    return 
  }

  let widthStyle = computed(() => { return props.wrap ? '100%' : 'max-content'});

  const virtualizer = useVirtualizer(virtualizerOptions)

  const viewLoaded = () => {
    if (loaded.value === true) return;
    loaded.value = true;
    if (props.direction === 'up' && logEvents.value.length > 0){
      virtualizer.value.scrollToIndex(logEvents.value.length - 1, { align: 'end', smoothScroll: false });
    }
  }

  const debouncedSearch = _.debounce((q) => onSearch(q), 300, {maxWait: 2});
  const debouncedInit = _.debounce(() => viewLoaded(), 500, {maxWait: 2});

  const measureElement = (el) => {
    nextTick(() => {
      if (!el) return;
      virtualizer.value.measureElement(el);
    });
  };

  let isBottom = computed(() => {
    let items = virtualizer.value.getVirtualItems()
    if (items.length > 0){
      let index = items[items.length - 1].index
      if (index < 999){
        return false
      }
    }

    return true;
  });

  let isTop = computed(() => {
    let items = virtualizer.value.getVirtualItems()
    if (items.length > 0){
      let index = items[0].index
      if (index > 0){
        return false
      }
    }

    return true;
  });

  let toBottom = () => {
    if (logEvents.value.length > 0){
      virtualizer.value.scrollToIndex(logEvents.value.length - 1, { align: 'end', smoothScroll: false });  
    }
  }

  let toTop = () => {
    if (logEvents.value.length > 0){
      virtualizer.value.scrollToIndex(0, { align: 'end', smoothScroll: false });  
    }
  }

  watch(() => props.events, () => {
    if (props.direction == 'up'){
      logEvents.value = [...props.events];
    } else {
      logEvents.value = [...props.events].reverse();
    }
    debouncedInit();
    
    if (!loaded.value) return;
    updateId.value += 1;
  })

  watch(() => props.direction, () => {
    if (props.direction === 'up'){
      logEvents.value = [...props.events];
      toBottom();
    } else {
      logEvents.value = [...props.events].reverse();
      toTop();
    }
    
    if (!loaded.value) return;
    updateId.value += 1;
  })

  let findOccurrences = (lines, query) => {
    const regex = new RegExp(escapeRegExp(query), "gi");
    
    let ol = [];
    let oc = {};
    lines.forEach((line, index) => {
      let matches = [...line.matchAll(regex).map(x => x.index)]
      if (matches.length > 0){
        oc[index] = matches;
        ol = ol.concat(matches.map(x => ({row:index, index: x })));
      }
    });

    return [ol, oc];
  }

  let getNextOverlay = (loopResults = false) => {
    const next = activeOverlay.value + 1;

    if (next > overlays.value.length - 1) {
      return loopResults ? 0 : activeOverlay.value;
    }

    return next;
  }

  let escapeRegExp = (str) => {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
  }

  let onSearch = (q) => {
/*    if (query.value === q){ // trigger next overlay
        if (overlays.value.length === 0) return;
        let next = getNextOverlay(true);
        if (activeOverlay.value == next) return;
        activeOverlay.value = next;
        // virtualizer.scrollToIndex(overlays.value[activeOverlay.value].row, { align: 'end', smoothScroll: false });
      return;
    }*/

    if (query.value !== q){
      query.value = q;
      occurrences.value = [];
      overlays.value = [];
      activeOverlay.value = -1;
    }

    if (query.value === '') {
      occurrences.value = [];
      overlays.value = [];
      activeOverlay.value = -1;
      return;
    }

    let [ov, oc] = findOccurrences(logEvents.value, query.value);
    overlays.value = ov;
    occurrences.value = oc;

    if (occurrences.value.length === 0) return;

    let next = getNextOverlay(true);
    if (activeOverlay.value < 0 && overlays.value.length > 0){
        // virtualizer.scrollToIndex(overlays.value[activeOverlay.value].row, { align: 'end', smoothScroll: false });
    }
    // If new highlighted keyword in exact same place as previous one, then no changing in active overlay
    if (overlays.value[activeOverlay.value] === undefined) {
      //activeOverlay.value = getNextOverlay(true);
    }
  }

  logBus.on((q) => { debouncedSearch(q); })

  //watch(() => props.direction, () => {

  /* 
  // scroll to search
   useEffect(() => {
    rowVirtualizer.scrollToIndex(model.searchStore.occurrences[model.searchStore.activeOverlayIndex], { align: 'end', smoothScroll: false });
  }, [model.searchStore.activeOverlayIndex])
  */

  return {virtualizer, virtualizerOptions, measureElement, widthStyle, parentRef, 
    query, occurrences, findOccurrences, escapeRegExp, onSearch, debouncedSearch, overlays, activeOverlay, getNextOverlay,
    logEvents, loaded, updateId, isBottom, isTop, toBottom, toTop, viewLoaded, debouncedInit}
}

components["log-viewer"] = { template: "#log-viewer", emits: [], setup, 
  props: {
    events: Array,
    wrap: Boolean,
    direction: String,
  }
};
</script>
