<template id="log-viewer">
  <div class="absolute top-20 right-12 z-50">
    <div v-if="direction == 'up' && !isBottom" title="To bottom" alt="To bottom" @@click="toBottom"
         class="flex px-4 py-2 rounded-lg items-center justify-center border cursor-pointer
                  border-gray-300 bg-white fill-gray-300
                  hover:border-sky-500 hover:bg-sky-100 hover:fill-sky-500
                  dark:border-white/[.4] dark:text-white/[.6]
                  data-enabled:dark:bg-zinc-700 dark:data-enabled:border-white
                  dark:hover:border-white dark:hover:text-white dark:hover:fill-white dark:hover:bg-zinc-700
                  dark:bg-zinc-900">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 13.5 12 21m0 0-7.5-7.5M12 21V3" />
      </svg>
    </div>
    <div v-if="direction == 'down' && !isTop" title="To top" alt="To top" @@click="toTop"
         class="flex px-4 py-2 rounded-lg items-center justify-center border cursor-pointer
                  border-gray-300 bg-white fill-gray-300
                  hover:border-sky-500 hover:bg-sky-100 hover:fill-sky-500
                  dark:border-white/[.4] dark:text-white/[.6]
                  data-enabled:dark:bg-zinc-700 dark:data-enabled:border-white
                  dark:hover:border-white dark:hover:text-white dark:hover:fill-white dark:hover:bg-zinc-700
                  dark:bg-zinc-900">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 10.5 12 3m0 0 7.5 7.5M12 3v18" />
      </svg>
    </div>
  </div>
  
  <div ref="parentRef" :style="{contain: 'strict', overflow: 'auto', height: '85vh'}"
       class="border border-gray-300 rounded-md
      cursor-text font-mono text-xs 
      dark:border-zinc dark:bg-black dark:border-white/[.4] dark:text-white/[.9]">

    <div :style="{ height: `${virtualizer.getTotalSize()}px`, position: 'relative', width: widthStyle }">

      <div v-if="events.length == 0" class="justify-center w-full flex py-2">
        <spinner></spinner>
      </div>

      <div v-for="virtualRow in virtualizer.getVirtualItems()"
           class="px-2 break-words leading-5 break-all dark:hover:bg-zinc-800 hover:bg-sky-100"
           :class="[overlays[activeOverlay]?.row === virtualRow.index ? 'dark:bg-zinc-800 bg-sky-100' : '']"
           :key="virtualRow.key + '-' + updateId"
           :data-index="virtualRow.index"
           :ref="measureElement"
           :style="{ position: 'absolute', top: `${virtualRow.start}px`, left: 0, width: widthStyle }">
        <template v-if="query.length > 0 && occurrences[virtualRow.index]">
          <template v-for="segment in getRow(virtualRow.index)">
            <span v-if="segment.overlay && segment.active" class="bg-orange-300 dark:bg-orange-700">{{segment.content}}</span>
            <span v-else-if="segment.overlay" class="bg-green-300 dark:bg-green-700">{{segment.content}}</span>
            <span v-else>{{ segment.content }}</span>
          </template>
        </template>
        <span v-else>{{ logEvents[virtualRow.index] }}</span>
      </div>
    </div>
  </div>
</template>

<script type="module">
import { ref, toRef, watch, computed, onMounted, nextTick } from 'vue'
import { useVirtualizer } from '@@tanstack/vue-virtual'

let setup = (props, ctx) => {
  const parentRef = ref(null);
  const updateId = ref(0);
  const loaded = ref(false);
  const logEvents = ref([]);
  const occurrences = ref([]);
  const overlays = ref([]);
  const activeOverlay = ref(-1);
  const query = ref('');
  const status = useGlobalOverlays();

  let virtualizerOptions = computed(() => {
    return {
      count: logEvents.value.length,
      estimateSize: () => 30,
      overscan: 20,
      getScrollElement: () => parentRef.value,
    }
  })

  let widthStyle = computed(() => { return props.wrap ? '100%' : 'max-content'});

  const virtualizer = useVirtualizer(virtualizerOptions)

  let getRow = (i) => {
    let row = logEvents.value[i]
    let hits = occurrences.value[i] ?? [];
    if (hits.length === 0) return [{ content: row }];

    let result = []
    let length = query.value.length;
    let current = overlays.value[activeOverlay.value];
    hits.forEach((curr, idx) => {
      let prev = hits[idx - 1];
      let next = hits[idx + 1];
      
      let start = 0
      if (prev !== undefined){
        start = prev + length;
      }
      let end = next ?? row.length;

      let segment1 = row.slice(start, curr);
      result.push({ content: segment1 });
      let active = false;
      if (current !== undefined){
        active = curr === current?.index && i === current?.row;
      }
      let segment2 = row.slice(curr, curr + length);
      result.push({ content: segment2, overlay: true, active: active });

      if (next === undefined){
        let segment3 = row.slice(curr + length, end);
        result.push({ content: segment3 });
      }
    });

    return result;
  }

  const viewLoaded = () => {
    if (loaded.value === true) return;
    loaded.value = true;
    if (props.direction === 'up' && logEvents.value.length > 0){
      virtualizer.value.scrollToIndex(logEvents.value.length - 1, { align: 'end', smoothScroll: false });
    }
  }

  const debouncedSearch = _.debounce((q) => onSearch(q), 300, {maxWait: 2});
  const debouncedInit = _.debounce(() => viewLoaded(), 500, {maxWait: 2});

  const measureElement = (el) => {
    nextTick(() => {
      if (!el) return;
      virtualizer.value.measureElement(el);
    });
  };

  let isBottom = computed(() => {
    let items = virtualizer.value.getVirtualItems()
    if (items.length > 0){
      let index = items[items.length - 1].index
      if (index < 999){
        return false
      }
    }

    return true;
  });

  let isTop = computed(() => {
    let items = virtualizer.value.getVirtualItems()
    if (items.length > 0){
      let index = items[0].index
      if (index > 0){
        return false
      }
    }

    return true;
  });

  let toBottom = () => {
    if (logEvents.value.length > 0){
      virtualizer.value.scrollToOffset(virtualizer.value.getTotalSize() + 100, { align: 'end', smoothScroll: false });
    }
  }

  let toTop = () => {
    if (logEvents.value.length > 0){
      virtualizer.value.scrollToIndex(0, { align: 'start', smoothScroll: false });
    }
  }

  watch(() => props.events, () => {
    if (props.direction === 'up'){
      logEvents.value = [...props.events];
    } else {
      logEvents.value = [...props.events].reverse();
    }
    debouncedInit();

    if (query.value.length > 0){
      let [ov, oc] = findOccurrences(logEvents.value, query.value);
      overlays.value = ov;
      occurrences.value = oc;
    }

    if (!loaded.value) return;
    updateId.value += 1;
  })

  watch([overlays, activeOverlay], () => {
    status.value.current = props.direction === 'up' ? overlays.value.length - activeOverlay.value : activeOverlay.value + 1;
    status.value.total = overlays.value.length;
  })

  watch(() => props.direction, () => {
    if (props.direction === 'up'){
      logEvents.value = [...props.events];
      if (query.value.length > 0)
      {
        let [ov, oc] = findOccurrences(logEvents.value, query.value);
        overlays.value = ov;
        occurrences.value = oc;
        activeOverlay.value = overlays.value.length - 1;
      }
      toBottom();
    } else {
      logEvents.value = [...props.events].reverse();
      if (query.value.length > 0)
      {
        let [ov, oc] = findOccurrences(logEvents.value, query.value);
        overlays.value = ov;
        occurrences.value = oc;
        activeOverlay.value = 0;
      }
      toTop();
    }
    
    if (!loaded.value) return;
    updateId.value += 1;
  })

  let findOccurrences = (lines, query) => {
    const regex = new RegExp(escapeRegExp(query), "gi");
    
    let ol = [];
    let oc = {};
    lines.forEach((line, index) => {
      let matches = [...line.matchAll(regex).map(x => x.index)]
      if (matches.length > 0){
        oc[index] = matches;
        ol = ol.concat(matches.map(x => ({row:index, index: x })));
      }
    });

    return [ol, oc];
  }

  let getPrevOverlay = (loopResults = false) => {
    const prev = activeOverlay.value - 1;

    if (prev < 0) {
      return loopResults ? overlays.value.length - 1 : activeOverlay.value;
    }

    return prev;
  }

  let getNextOverlay = (loopResults = false) => {
    const next = activeOverlay.value + 1;

    if (next > overlays.value.length - 1) {
      return loopResults ? 0 : activeOverlay.value;
    }

    return next;
  }

  let escapeRegExp = (str) => {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
  }

  let handleEvent = (e) => { // navigate overlay
    let reverse = e.shiftKey ?? false;
    if (props.direction === 'up'){
      reverse = !reverse;
    }

    if (e.key === 'Enter') 
    {
        if (overlays.value.length === 0) return;
        
        let next = reverse ? getPrevOverlay(true) : getNextOverlay(true);

        if (activeOverlay.value === next) return;
        activeOverlay.value = next;
        virtualizer.value.scrollToIndex(overlays.value[activeOverlay.value].row, { align: 'center', smoothScroll: false });
        updateId.value += 1; // redraw view
      return;
    }

    if (e.key === 'ArrowUp')
    {
      if (overlays.value.length === 0) return;
        
      let next = reverse ? getPrevOverlay(true) : getNextOverlay(true);

      if (activeOverlay.value === next) return;
      activeOverlay.value = next;
      virtualizer.value.scrollToIndex(overlays.value[activeOverlay.value].row, { align: 'center', smoothScroll: false });
      updateId.value += 1; // redraw view
      
      return;
    }

    if (e.key === 'ArrowDown')
    {
      if (overlays.value.length === 0) return;
        
      let next = reverse ? getNextOverlay(true) : getPrevOverlay(true);

      if (activeOverlay.value === next) return;
      activeOverlay.value = next;
      virtualizer.value.scrollToIndex(overlays.value[activeOverlay.value].row, { align: 'center', smoothScroll: false });
      updateId.value += 1; // redraw view

      return;
    }
  }

  let onSearch = (q) => {
    if (query.value === q.query && query.value !== '') return;

    if (query.value !== q.query){
      query.value = q.query;
      occurrences.value = [];
      overlays.value = [];
      activeOverlay.value = -1;
    }

    if (query.value === '') {
      occurrences.value = [];
      overlays.value = [];
      activeOverlay.value = -1;
      return;
    }

    let [ov, oc] = findOccurrences(logEvents.value, query.value);
    overlays.value = ov;
    occurrences.value = oc;

    if (occurrences.value.length === 0) return;

    let reverse = props.direction === 'up';

    let next = reverse ? getPrevOverlay(true) : getNextOverlay(true);
    
    if (activeOverlay.value < 0 && overlays.value.length > 0){
      activeOverlay.value = next;      
    }
    let row = overlays.value[activeOverlay.value].row;
    if (row !== undefined){
      virtualizer.value.scrollToIndex(overlays.value[activeOverlay.value].row, { align: 'center', behavior: false });
    }

    updateId.value += 1; // redraw view
  }

  logBus.on((q) => { 
    debouncedSearch(q); 
    handleEvent(q.e);
  })

  return {virtualizer, virtualizerOptions, measureElement, widthStyle, parentRef, 
    query, status, occurrences, findOccurrences, escapeRegExp, onSearch, debouncedSearch, overlays, activeOverlay, getNextOverlay, getPrevOverlay, getRow, handleEvent, 
    logEvents, loaded, updateId, isBottom, isTop, toBottom, toTop, viewLoaded, debouncedInit}
}

components["log-viewer"] = { template: "#log-viewer", emits: [], setup, 
  props: {
    events: Array,
    wrap: Boolean,
    direction: String,
  }
};
</script>
