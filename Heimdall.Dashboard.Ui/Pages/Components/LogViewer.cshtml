<template id="log-viewer">
  <div ref="parentRef"
    class="border border-gray-300 rounded-md h-[85vh] overflow-auto
          cursor-text font-mono text-xs 
          dark:border-zinc dark:bg-black dark:border-white/[.4] dark:text-white/[.9]">
    <div>

      <div v-if="events.length == 0" 
            class="justify-center w-full flex py-2">
        <spinner></spinner>
      </div>

      <div v-else class="">
        <div v-for="e in events" class="px-2 break-words break-all leading-5 dark:hover:bg-zinc-900 hover:bg-gray-100" >
          <span>{{ e }}</pre>
        </div>
      </div>

      <!--
    <div ref="parentRef"
      class="List"
      style="height: 400px; width: 400px; overflow-y: auto; contain: strict"
    >
      <div :style="{ height: `${totalSize}px`, width: '100%', position: 'relative' }" >
        <div :style="{ position: 'absolute', top: 0, left: 0, width: '100%', transform: `translateY(${virtualRows[0]?.start ?? 0}px)` }" >
          
          <div v-for="virtualRow in virtualRows"
            :key="virtualRow.key"
            :data-index="virtualRow.index"
            :ref="measureElement"
          >
            <div style="padding: 10px 0">
              <div>Row {{ virtualRow.index }}</div>
              <div>{{ sentences[virtualRow.index] }}</div>
            </div>
          </div>
        </div>
      </div>
    </div>

      -->

    </div>

  </div>
</template>

<script type="module">
import { ref, watch, computed, onMounted } from 'vue'
import { useVirtualizer } from '@@tanstack/vue-virtual'

let setup = (props, ctx) => {
  const parentRef = ref(null)

  const rowVirtualizer = useVirtualizer({
    count: events.length,
    getScrollElement: () => parentRef.value,
    estimateSize: () => 16,
  })

  /* 
  // Initial scroll to bottom
  useEffect(() => {
    setTimeout(() => {
      rowVirtualizer.scrollToIndex(visibleLogs.get().length - 1, { align: 'end', smoothScroll: false });
    }, 200)
  }, [model.logTabData.get()?.selectedPodId])

  // To bottom
  useEffect(() => {
    rowVirtualizer.scrollToIndex(visibleLogs.get().length - 1, { align: 'end', smoothScroll: false });
  }, [model.logTabData.get()]);

  // scroll to search
   useEffect(() => {
    rowVirtualizer.scrollToIndex(model.searchStore.occurrences[model.searchStore.activeOverlayIndex], { align: 'end', smoothScroll: false });
  }, [model.searchStore.activeOverlayIndex])
  */

  const virtualRows = computed(() => rowVirtualizer.value.getVirtualItems())
  const totalSize = computed(() => rowVirtualizer.value.getTotalSize())

  const measureElement = (el) => {
    if (!el) {
      return
    }

    rowVirtualizer.value.measureElement(el)

    return undefined
  }

  return {rowVirtualizer, totalSize, measureElement}
}

components["log-viewer"] = { template: "#log-viewer", emits: [], setup, 
  props: {
    events: Array
  }
};
</script>
