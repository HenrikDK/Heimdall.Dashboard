<template id="vue-table">

  <div class="border border-gray-200 rounded-lg dark:border-zinc-700 mt-4"> <!-- table outer border -->
    <div class="flex top-0 w-full z-10 bg-gray-100 dark:bg-zinc-900 rounded-t-lg"> <!-- header -->
      <div v-for="column in columns"
            class="text-left text-xs font-strong text-black uppercase dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-zinc-700"
            :class="column.classes">
          
        <div class="flex">
          <div class="px-4 py-2 grow shrink">
            {{ column.header }}
          </div>

          <div v-if="column.canSort || column.canSort == undefined"
                class="px-2 py-2 float-right cursor-pointer select-none"
                @@click="onSelectSort($event, column.id)">
            <template v-if="sorting.find(x => x.id === column.id) == undefined">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9"/>
              </svg>
            </template>
            <template v-if="sorting.find(x => x.id === column.id)?.sort === 'asc'">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"/>
              </svg>
            </template>
            <template v-if="sorting.find(x => x.id === column.id)?.sort === 'desc'">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"/>
              </svg>
            </template>
          </div>
        </div>
      </div>
    </div>

    <div ref="parentRef" :style="{contain: 'strict', overflow: 'auto', width: '100%', height: '85vh'}"
      class="text-left divide-y divide-gray-200 dark:divide-zinc-700 dark:bg-zinc-900 rounded-b-lg"> <!-- table -->

      <div :style="{ height: `${virtualizer.getTotalSize()}px`, position: 'relative', width: '100%' }"
        class="text-sm text-gray-700 dark:text-gray-300 dark:divide-zinc-700"> <!-- body -->
      
        <div v-if="!loading && rows.length == 0" class="justify-center w-full flex py-2">
          <spinner></spinner>
        </div>

        <div v-for="row in virtualizer.getVirtualItems()" 
            :key="row.key"
            :data-index="row.index"
            :ref="measureElement"
            :style="{ position: 'absolute', top: `${row.start}px`,  width: '100%' }" >

            <router-link v-if="$route.name === 'pods'" :to="getLink(rows[row.index])">
              <vue-table-row :row="rows[row.index]" :vrow="row" :columns="columns"></vue-table-row>          
            </router-link>
            <router-link v-else-if="$route.name === 'workloads'" :to="getLink(rows[row.index])">
              <vue-table-row :row="rows[row.index]" :vrow="row" :columns="columns"></vue-table-row>          
            </router-link>
            <template v-else>
              <vue-table-row :row="rows[row.index]" :vrow="row" :columns="columns"></vue-table-row>          
            </template>
        </div>
      </div>
    </div>

  </div>

</template>

<script type="module">
import { ref, provide, watch, computed, onMounted, onBeforeUnmount, nextTick } from 'vue'
import { useVirtualizer } from '@@tanstack/vue-virtual'

let setup = (props, ctx) => {
  const parentRef = ref(null);
  const sorting = ref([]);
  const timer = ref('');
  const rows = ref([]);
  
  const updateKey = ref(0);
  provide('updateKey', updateKey)

  let virtualizerOptions = computed(() => {
    return {
      count: rows.value.length,
      estimateSize: () => 40,
      overscan: 20,
      getScrollElement: () => parentRef.value,
    }
  })

  let virtualizer = useVirtualizer(virtualizerOptions);

  const measureElement = (el) => {
    nextTick(() => {
      if (!el) return;
      virtualizer.value.measureElement(el);
    });
  };
  
  let cancelAutoUpdate = () => {
    clearInterval(timer.value);
  };

  let onSelectSort = (e, id) => {
    var existing = sorting.value.find(x => x.id === id);
    if (!e.shiftKey){
      sorting.value = [];
    }
    if (existing === undefined){
      let sort = {
         id: id, sort: 'asc'
      }
      sorting.value.push(sort)
      sorting.value = [...sorting.value];
      return;
    }
    
    if (existing.sort === 'asc'){
      existing.sort = 'desc'
      if (sorting.value.length === 0){
        sorting.value.push(existing) 
      }
      sorting.value = [...sorting.value];
      return;
    }
       
    if (existing.sort === 'desc'){
      sorting.value = sorting.value.filter(x => x.id !== existing.id);
    }            
  }
  
  let updateTable = () => {
    if ((props.columns?.length ?? 0) === 0) return
    
    let content = sortRows(sorting.value, props.columns, props.data)
    
    content.forEach(x => {
      x.filtered = false;
      x.nsFiltered = false;
    })
    
    filterRows(content, props.columns, props.namespaces, props.search)
    
    rows.value = content.filter(row => !row.filtered && !row.nsFiltered)
  }
  
  let getLink = (row) => {
    if (['Deployment', 'DaemonSet', 'StatefulSet', 'Job', 'CronJob', ].includes(row.kind))
    {
        return { name: 'workload-details', params: { namespace: row.metadata.namespace, type: row.kind.toLowerCase(), name: row.metadata.name }}   
    }
    
    return { name: 'pod-details', params: { namespace: row.metadata.namespace, name: row.metadata.name }}
  };
  
  watch([() => props.columns,() => props.data,() => props.namespaces,() => props.search, sorting], updateTable);
  
  onMounted(() => {
    if (props.initialSort !== undefined && props.initialSort.length > 0){
      sorting.value = [...props.initialSort];
    }
        
    updateTable();
    timer.value = setInterval(() => updateKey.value += 1, 5000);
  });
  
  onBeforeUnmount(() => {
    cancelAutoUpdate();
  });
  
  return {
    sorting, timer, updateKey, rows, virtualizerOptions, virtualizer, measureElement, parentRef,
    getLink, cancelAutoUpdate, onSelectSort, updateTable
  }
}

components["vue-table"] = { template: "#vue-table", props: ['data', 'columns', 'initialSort', 'namespaces', 'loading', 'search'], setup };
</script>

<script>
function sortRows(sorting, columns, rows){  
  if (!rows.length || !sorting?.length) {
    return rows
  }
  
  // Filter out sortings that correspond to non existing columns
  const availableSorting = sorting.filter(s =>
    {
      let column = columns.find(x => x.id === s.id);
      if (!column) return false
      return column.canSort ?? true
    }
  );

  const columnInfos = {}
  availableSorting.forEach(s => {
    const column = columns.find(x => x.id === s.id)
    if(!column) return

    columnInfos[s.id] = {
      accessor: column.accessor,
      direction: s.sort,
      sorter: getSortFn(column.sorter),
    }
  });
  
  return sortData(rows, availableSorting, columnInfos)
}

function filterRows(rows, columns, namespaces, search){
  if ((search === undefined || search?.length === 0) && (namespaces === undefined || namespaces?.length === 0)) return;
  
  const filterColumns = columns.filter(x => (x.canFilter ?? true))
  let nsColumn = columns.filter(x => x.header === 'Namespace')[0]
  let tokens = [];
  if (search?.length > 0){
    tokens = search.trim().split(' ')
  }
  
  rows.forEach(row => {
    if (namespaces.length){
      let val = nsColumn.accessor(row);
      row.nsFiltered = !namespaces.includes(val);
    }
    
    if (tokens.length){
      let values = filterColumns.map(fc => {
         let val = fc.accessor(row);
         
         if (typeof val === 'object'){
           return JSON.stringify(val)
         }
         return '' + val
      })
      
      row.filtered = !values.some(x => tokens.every(y => x.includes(y)))
    }
  });
}

function sortData(rows, sorting, columnInfos){
  const sortedData = [...rows]

  sortedData.sort((rowA, rowB) => {
    for (let i = 0; i < sorting.length; i += 1) {
      const sortEntry = sorting[i]
      const columnInfo = columnInfos[sortEntry.id]
      const isDesc = columnInfo?.direction === 'desc' ?? false

      let valA = columnInfo.accessor(rowA)
      let valB = columnInfo.accessor(rowB)
      let sortInt = columnInfo.sorter(valA, valB)

      if (sortInt !== 0) {
        if (isDesc) {
          sortInt *= -1
        }
        
        return sortInt
      }
    }

    return rows.indexOf(rowA) - rows.indexOf(rowB)
  })

  return sortedData
}

function getSortFn(sorter = 'textCS'){
  if (typeof sorter === 'function'){
    return sorter
  }
  
  let compare = text;
  if (sorter === 'an'){
    compare = alphanumeric;
  }
  if (sorter === 'anCS'){
    compare = alphanumericCaseSensitive
  }
  if (sorter === 'textCS'){
    compare = textCaseSensitive
  }
  if (sorter === 'datetime'){
    compare = datetime
  }
  if (sorter === 'number'){
    compare = number  
  }
  return compare;
}

function number(a, b) {
  return a === b ? 0 : a > b ? 1 : -1
}

function alphanumeric(valA, valB){
  const a = toString(valA).toLowerCase();
  const b = toString(valB).toLowerCase();
  return compareAlphanumeric(a, b);
}

function alphanumericCaseSensitive(valA, valB){
  const a = toString(valA);
  const b = toString(valB);
  return compareAlphanumeric(a, b);
}

// The text filter is more basic (less numeric support), but is much faster
function text(textA, textB) {
  const a = toString(textA).toLowerCase();
  const b = toString(textB).toLowerCase(); 
  
  return a === b ? 0 : a > b ? 1 : -1
}

// The text filter is more basic (less numeric support), but is much faster
function textCaseSensitive(textA, textB){
  const a = toString(textA);
  const b = toString(textB);
  return a === b ? 0 : a > b ? 1 : -1
}

// Can handle nullish values
function datetime(dateA, dateB){
  const a = dateA;
  const b = dateB;

  // Use > and < because == (and ===) doesn't work with
  // Date objects (would require calling getTime()).
  return a > b ? 1 : a < b ? -1 : 0
}

function toString(a) {
  if (typeof a === 'number') {
    if (isNaN(a) || a === Infinity || a === -Infinity) {
      return ''
    }
    return String(a)
  }
  if (typeof a === 'string') {
    return a
  }
  return ''
}

// Mixed sorting is slow, but very inclusive of many edge cases.
// It handles numbers, mixed alphanumeric combinations, and even null, undefined, and Infinity
function compareAlphanumeric(aStr, bStr) {
  const reSplitAlphaNumeric = /([0-9]+)/gm

  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)
  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)

  while (a.length && b.length) {
    const aa = a.shift()
    const bb = b.shift()

    const an = parseInt(aa, 10)
    const bn = parseInt(bb, 10)

    const combo = [an, bn].sort()

    // Both are string
    if (isNaN(combo[0])) {
      if (aa > bb) {
        return 1
      }
      if (bb > aa) {
        return -1
      }
      continue
    }

    // One is a string, one is a number
    if (isNaN(combo[1])) {
      return isNaN(an) ? -1 : 1
    }

    // Both are numbers
    if (an > bn) {
      return 1
    }
    if (bn > an) {
      return -1
    }
  }

  return a.length - b.length
}
</script>