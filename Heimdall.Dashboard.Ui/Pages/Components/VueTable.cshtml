<template id="vuetable">
  <div class="border border-gray-200 shadow-md rounded-lg overflow-hidden dark:border-zinc-700 mt-4">
    <table class="vh-80 min-w-full divide-y divide-gray-200 text-left dark:divide-zinc-700">
      <thead class="bg-gray-100 dark:bg-zinc-800">
      <tr>
        <th v-for="column in columns" 
          class="text-left text-xs font-strong text-black dark:text-gray-200 uppercase hover:bg-gray-200 dark:hover:bg-zinc-700"
          :class="column.classes"
        >

          <div class="flex">
            <div class="px-4 py-2 grow">
              {{ column.header }}
            </div>

            <div v-if="column.canSort || column.canSort == undefined"
                 class="px-4 py-2 float-right cursor-pointer select-none"
                 @@click="onSelectSort($event, column.header)">
              <template v-if="sorting.find(x => x.header === column.header) == undefined">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9"/>
                </svg>
              </template>
              <template v-if="sorting.find(x => x.header === column.header)?.sort === 'asc'">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"/>
                </svg>
              </template>
              <template v-if="sorting.find(x => x.header === column.header)?.sort === 'desc'">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"/>
                </svg>
              </template>
            </div>
          </div>
        </th>
      </tr>
      </thead>
      <tbody class="divide-y divide-gray-200 dark:divide-zinc-700">
      <tr v-for="row in rows"
          class="hover:bg-blue-100 dark:bg-zinc-900 dark:hover:bg-zinc-700">
        <td v-for="column in columns"
            class="px-4 py-2 whitespace-nowrap text-sm text-gray-700 dark:text-gray-400"
            :class="column.classes">
          <template v-if="column.formatter == undefined">
            <template v-if="column.name.includes('.')">
              {{ getNested(row, column.name)}}
            </template>
            <template v-else>
              {{ row[column.name] }}
            </template>
          </template>
          <template v-else>
            <span v-html="column.formatter(row)"></span>
          </template>
        </td>
      </tr>
      </tbody>
    </table>
  </div>
</template>

<script type="module">
    components["vuetable"] = {
      template: "#vuetable",
      data() {
        return {
            rows: [],
            sorting: []
        }
      },
      methods:{
        getNested(row, name){
          let result = row;
          var fields = name.split('.')
          fields.forEach(f => {
            result = result[f]
          })
          return result;
        },
        onSelectSort(e, header){
          var existing = this.$data.sorting.find(x => x.header === header);
          if (!e.shiftKey){
            this.$data.sorting = [];
          }
          if (existing === undefined){
            let sort = {
               header: header, sort: 'asc'
            }
            this.$data.sorting.push(sort)
            return;
          }
          
          if (existing['sort'] === 'asc'){
            existing['sort'] = 'desc'
            if (this.$data.sorting.length === 0){
              this.$data.sorting.push(existing) 
            }
            return;
          }
          
          if (existing['sort'] === 'desc'){
            this.$data.sorting = this.$data.sorting.filter(x => x.header !== existing['header']);
          }            
        },
        doSort () {
          if ((this.$props.columns?.length ?? 0) === 0) return
          
          this.$data.rows = sortRows(this.$data.sorting, this.$props.columns, this.$props.data)
        }
      },
      watch:{
        sorting(){
          this.doSort();
        },
        columns(){
          this.doSort();
        },
        data(){
          this.doSort();
        }
      },
      props: ['data', 'columns', 'initialSort'],        
      mounted() {
        if (this.$props.initialSort !== undefined && this.$props.initialSort.length > 0){
          this.$data.sorting = [...this.$props.initialSort];
        }
        
        this.doSort();
      },
    };
</script>

<script>
function getSortFn(sorter = 'auto'){
  if (typeof sorter === 'function'){
    return sorter
  }
  
  let compare = basic;  
  if (sorter === 'alphanumeric'){
    compare = alphanumeric;
  }
  if (sorter === 'alphanumericCaseSensitive'){
    compare = alphanumericCaseSensitive
  }
  if (sorter === 'text'){
    compare = text
  }
  if (sorter === 'textCaseSensitive'){
    compare = textCaseSensitive
  }
  if (sorter === ''){
    compare = datetime
  }
  return compare;
}

function sortRows(sorting, columns, rows){  
  if (!rows.length || !sorting?.length) {
    return rows
  }

  const sortingState = sorting
  const sortedFlatRows = []

  // Filter out sortings that correspond to non existing columns
  const availableSorting = sortingState.filter(s =>
    {
      let column = columns.find(x => x.header === s.header);
      if (!column) return false
      return column.canSort ?? true
    }
  );

  const columnInfos = {}
  availableSorting.forEach(s => {
    const column = columns.find(x => x.header === s.header)
    if(!column) return

    columnInfos[s.header] = {
      column: column.name,
      direction: s.sort,
      sorter: getSortFn(column.sorter),
    }
  });
  
  return sortData(rows, availableSorting, columnInfos)
}

function sortData(rows, sorting, columnInfos){
  // This will also perform a stable sorting using the row index if needed.
  const sortedData = [...rows]

  sortedData.sort((rowA, rowB) => {
    for (let i = 0; i < sorting.length; i += 1) {
      const sortEntry = sorting[i]
      const columnInfo = columnInfos[sortEntry.header]
      const isDesc = columnInfo?.direction === 'desc' ?? false

      // This function should always return in ascending order
      let sortInt = columnInfo.sorter(rowA[columnInfo.column], rowB[columnInfo.column])

      if (sortInt !== 0) {
        if (isDesc) {
          sortInt *= -1
        }
        
        return sortInt
      }
    }

    return rows.indexOf(rowA) - rows.indexOf(rowB)
  })

  return sortedData
}

function alphanumeric(valA, valB){
  const a = toString(valA).toLowerCase();
  const b = toString(valB).toLowerCase();
  return compareAlphanumeric(a, b);
}

function alphanumericCaseSensitive(valA, valB){
  const a = toString(valA);
  const b = toString(valB);
  return compareAlphanumeric(a, b);
}

// The text filter is more basic (less numeric support), but is much faster
function text(textA, textB) {
  const a = toString(textA).toLowerCase();
  const b = toString(textB).toLowerCase(); 
  
  return a === b ? 0 : a > b ? 1 : -1
}

// The text filter is more basic (less numeric support), but is much faster
function textCaseSensitive(textA, textB){
  const a = toString(textA);
  const b = toString(textB);
  return a === b ? 0 : a > b ? 1 : -1
}

// Can handle nullish values
function datetime(dateA, dateB){
  const a = dateA;
  const b = dateB;

  // Use > and < because == (and ===) doesn't work with
  // Date objects (would require calling getTime()).
  return a > b ? 1 : a < b ? -1 : 0
}

function basic(valA, valB){
  const a = valA;
  const b = valB;
  return a === b ? 0 : a > b ? 1 : -1
}

function toString(a) {
  if (typeof a === 'number') {
    if (isNaN(a) || a === Infinity || a === -Infinity) {
      return ''
    }
    return String(a)
  }
  if (typeof a === 'string') {
    return a
  }
  return ''
}

// Mixed sorting is slow, but very inclusive of many edge cases.
// It handles numbers, mixed alphanumeric combinations, and even null, undefined, and Infinity
function compareAlphanumeric(aStr, bStr) {
  const reSplitAlphaNumeric = /([0-9]+)/gm
  // Split on number groups, but keep the delimiter, Then remove falsey split values
  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)
  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)

  // While
  while (a.length && b.length) {
    const aa = a.shift()
    const bb = b.shift()

    const an = parseInt(aa, 10)
    const bn = parseInt(bb, 10)

    const combo = [an, bn].sort()

    // Both are string
    if (isNaN(combo[0])) {
      if (aa > bb) {
        return 1
      }
      if (bb > aa) {
        return -1
      }
      continue
    }

    // One is a string, one is a number
    if (isNaN(combo[1])) {
      return isNaN(an) ? -1 : 1
    }

    // Both are numbers
    if (an > bn) {
      return 1
    }
    if (bn > an) {
      return -1
    }
  }

  return a.length - b.length
}
</script>