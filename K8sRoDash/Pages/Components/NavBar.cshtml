<template id="nav-bar">
    <header class="px-2 text-base z-10 h-14 sticky top-0 bg-k8s">
        <nav>
            <div class="flex justify-between">
                <div>
                    <router-link class="text-white cursor-pointer" to="/">
                        <div class="flex pt-1">
                            <div>
                                <img src="art/viking-ship.svg" width="65" alt="Skúta"/>
                            </div>
                            <div class="px-3">
                                <span class="text-5xl text-white">Skúta</span>
                            </div>
                        </div>
                    </router-link>
                </div>
                <div class="flex justify-end items-center">
                    <template v-if="!$route.path.startsWith('/cluster')">
                    <div class="mr-3">
                        <v-select v-model="selected" :clearable="false" :options="namespaces" class="header-select" @@update:model-value="$emit('select-ns', $event.value)"></v-select>
                    </div>
                    <div class="mr-3">
                        <v-search v-model="search" @@update:model-value="$emit('search', $event);"></v-search>
                    </div>
                    </template>
                </div>
            </div>
        </nav>
    </header>
</template>

<script>
    components["nav-bar"] = {
      template: "#nav-bar",
      emits: ['search','select-ns'],
      data() {
        return {
            selected: '',
            filters: [],
            cluster: [],
            namespaces: [
                { label: 'All namespaces', value: ''},
            ],
            search: '',
        }
      },
      methods: {
          async updateList() {
              if (!this.cluster && this.cluster.length > 0) return;
              
              var ns = [{ label: 'All namespaces', value: ''}]

              var clusterNs = this.cluster;
              
              if (this.filters && this.filters.length > 0){
                  clusterNs = this.cluster.filter(x => nsEndsWith(x, this.filters));
              }
              
              clusterNs = clusterNs.map(x => { return { label: x.metadata.name, value: x.metadata.name}})
              
              ns = ns.concat(clusterNs)
              
              this.namespaces = ns;
          }
      },
      watch: {
        filters: function (){this.updateList()},
        cluster: function (){this.updateList()},
      },
      async mounted() {
        fetch("/?handler=filters")
         .then(d => d.json())
         .then(j => this.filters = j);
        
        var host = window.location.origin;
        streamResults(host + '/k8s/api/v1/namespaces', j => this.cluster = j)

        this.selected = this.namespaces[0];
      },
      computed: {},
    };
</script>

<style>
.header-select {
    width: 230px;
    height: 34px;
    font-size: 1rem;
    --vs-controls-color: rgba(255, 255, 255, 0.4);
    --vs-border-color: rgba(255, 255, 255, 0.4);

    --vs-dropdown-bg: #326ce5;
    --vs-dropdown-color: rgba(255, 255, 255, 0.4);

    --vs-selected-bg: #326ce5;
    --vs-selected-color: #ffffff;
    --vs-selected-border-color: #ffffff;
    
    --vs-search-input-color: #ffffff;
    --vs-search-input-bg: rgba(255, 255, 255, 0.4);
    --vs-search-input-placeholder-color: #ffffff;

    /* Active State */
    --vs-dropdown-option--active-bg: #1d5ce1;
    --vs-dropdown-option--active-color: #ffffff;
}

.vs--open,
.vs--open ul,
.vs--open div
{
    border-color: #ffffff !important;
}
</style>