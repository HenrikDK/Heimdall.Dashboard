<template id="workloads">
    <div class="pl-2 pr-4 w-100">
        <div class="flex my-2 items-center">
            <span class="text-slate-500 text-2xl font-light sans">Workloads</span>
        </div>
        
        <div class="flex justify-around mb-4 mt-1">
            <div class="graph">
                <v-chart :option="workloadsAvailable"></v-chart>
            </div>
            <div class="graph">
                <v-chart :option="podsAvailable"></v-chart>
            </div>
        </div>
        
        <div id="workloads-table" ref="workloads" v-show="workloadData.length > 0" class="vh-80 w-full"></div>        
    </div>
</template>

<script>
    components["workloads"] = {
        template: "#workloads",
        data() {
            return {
                cronJobs: null,
                daemonSets: null,
                workloads: null,
                jobs: null,
                statefulSets: null,
                table: null,
                workloadData: [],                
            }
        },
        props: ['namespaces', 'search'],        
        computed: {
            workloadsAvailable: () => workloadsReady(),
            podsAvailable: () => podReady(),
        },
        methods: {
            updateWorkloads(){
                if (!this.workloads) return;
                if (!this.daemonSets) return;
                if (!this.cronJobs) return;
                if (!this.jobs) return;
                if (!this.statefulSets) return;
                
                let items = [this.workloads, this.daemonSets, this.cronJobs, this.jobs, this.statefulSets];
                
                let result = items.flat().filter(x => !!x);
                
                if (this.namespaces){
                    result.filter(x => filterName(x, this.namespaces))
                }
                
                this.workloadData = result;
                this.table.setData(this.workloadData);
                this.table.redraw(true);
            },
            async searchTable() {
                if (!this.cluster && this.cluster.length > 0) return;
              
                let ns = [{ label: 'All namespaces', value: ''}]
              
                this.namespaces = ns;
            }
        },
        watch: {
            namespace: function (){this.updateWorkloads()},
            cronJobs: function (){this.updateWorkloads()},
            daemonSets: function (){this.updateWorkloads()},
            workloads: function (){this.updateWorkloads()},
            jobs: function (){this.updateWorkloads()},
            statefulSets: function (){this.updateWorkloads()},
            search: function (){this.searchTable()},
        },
        async mounted() {
              this.table = new Tabulator(this.$refs.workloads, {
                maxHeight:"80vh",
                layout:"fitData",
                movableColumns: true,
                persistence:true,
                persistenceMode:true,
                data: this.workloadData,
                reactiveData:true,
                columns: [
                    {title:"Type", field:"kind", sorter:"string", minWidth:250},
                    {title:"Name", field:"metadata.name", sorter:"string", minWidth:350},
                    {title:"Namespace", field:"metadata.namespace", sorter:"string", minWidth:200},
                    {title:"Age", field:"metadata.creationTimestamp", sorter:"time", minWidth:200},
                    {title:"Pods", field:"status", sorter:"string", minWidth:300},
                ],
              });
              
              var host = window.location.origin;
              streamResults(host + '/k8s/apis/apps/v1/deployments', j => this.workloads = j)
              streamResults(host + '/k8s/apis/apps/v1/daemonsets', j => this.daemonSets = j)
              streamResults(host + '/k8s/apis/apps/v1/statefulsets', j => this.statefulSets = j)
              streamResults(host + '/k8s/apis/batch/v1/cronjobs', j => this.cronJobs = j)
              streamResults(host + '/k8s/apis/batch/v1/jobs', j => this.jobs = j)
        }
    };

    routes.push({path:'/workloads', component: components["workloads"]})
</script>

<style>
</style>